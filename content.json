{"meta":{"title":"Joonseong H","subtitle":"IT blog / Thanks to everyone!","description":"using Hexo","author":"JSH","url":"http://OneNineIx.github.io"},"pages":[],"posts":[{"title":"Nodejs_project","slug":"Nodejs-project","date":"2018-11-12T21:21:06.000Z","updated":"2018-11-18T16:25:38.546Z","comments":true,"path":"2018/11/13/Nodejs-project/","link":"","permalink":"http://OneNineIx.github.io/2018/11/13/Nodejs-project/","excerpt":"","text":"nodejs_project 목차 1. 테이블의 구성2. 게시판의 접근권한3. connect-flash모듈 경고메세지4. 회원가입5. bcrypt모듈을 이용한 사용자정보 암호화6. passport, express-session 모듈을 이용한 로그인구현7. 로그인 여부에 따른 접근권한8. 상태정보의 시각화9. 보안_자바스크립트 인젝션10. 보안_sql인젝션11. 그 외 세부기능12. 마이페이지 안녕하세요 황준성입니다.nodejs와 몇가지 모듈들로 게시판을 만들어 보았습니다. 테스트영상 youtube 테이블의 구성rdbms는 mysql을 사용하였고, ER모델링 후 mysql의 Forward Engineering을 이용해서 스키마를 만들었습니다. 테이블은 3개로 구성되어 있으며 user,board,comment테이블이 있습니다. 특별한 부분은 없지만 user테이블의 admin컬럼은 추후 관리자권한을 부여한 사용자를 구분하기 위해 null로 컬럼을 만들어두었고, phone_number컬럼은 id/비밀번호찾기 기능을 위해 추가한 컬럼입니다. board테이블의 user_email컬럼과 comment테이블의 user_email,board_id는 외래키로 사용됩니다. 로그인을 하지 않은상태에서도 게시판의 내용과 댓글은 확인할 수 있도록 하였구요. connect-flash모듈 경고메세지글의 수정이나 mypage로의 이동은 로그인한 상태에서만 가능하도록 구현하였는데요. 또 그에대한 경고사항을 connect-flash 라는 모듈을 사용해서세션에 상황에 맞는 경고메세지를 추가해 사용자에게 응답하도록 하였습니다. 이 모듈은 휘발성이라 한번 사용되고 나서는 사라지는 특성으로 사용자에게 경고메시지 피드백을 전달하기에 좋아 사용하였습니다. 회원가입회원가입시에는 emailCheck() 라는 함수를 만들어서 사용자가 입력한 이메일이 이미 디비에 같은 이메일주소가 존재하는지를 검토하도록 하였는데요. emailCheck()가 true를 반환하면 경고메시지를 출력하고, false일 경우 다음 조건문들이 실행됩니다.이메일을 입력하였는지, 입력한 비밀번호 2개가 동일한지 정도를 체크하도록 하였습니다. 이와같이 해당하는 부분에도 connect-flash모듈을 사용해서사용자에게 피드백을 전달해 어떤 부분이 잘못 작성되었는지 혼동하지 않도록 하였습니다. bcrypt모듈을 이용한 사용자정보 암호화그리고 그 모든 조건문을 벗어나면bcrypt 라는 보안모듈을 사용해 사용자의 비밀번호를 암호화해서 db에 저장하도록 했는데요. 사용자가 입력한 비밀번호 pwd를 10번 솔트하여 hash값으로 반환하면 그 값을 user테이블의 password 컬럼에 저장하도록 하였습니다. bcrypt 라는 모듈은 사용자가 입력한 비밀번호를 웹의 관리자도 알아볼수 없도록 해쉬값으로 변환 해주는데요. 이와같이 저장된 모습을 볼수 있습니다. passport, express-session 모듈을 이용한 로그인구현로그인에 사용된 모듈은 passport와 express-session을 이용하였습니다. 사용자가 전송한 email로 데이터베이스를 조회해서 해당하는 로우가 존재하면 bcrypt모듈의 compare함수로 사용자가 입력한 password를 다시 해당하는 해쉬값으로 변환해서 데이터베이스와 대조하고 일치여부에 따라 로그인에 성공하면 passport의 serializeUser로 세션에 식별자값을 추가하는 방식입니다. passport의 deserializeUser는 페이지를 이동할 때마다 호출되는데요.세션에 저장된 정보로 데이터베이스와 세션정보를 비교해 로그인 상태를 확인합니다. 로그인 여부에 따른 접근권한그리고 세션에 저장된 이메일정보로 로그인 상태 여부를 확인할 수 있는 isOwner함수를 만들어서 사용자의 로그인상태에 따라 접근권한을 제한하였습니다. 상태정보의 시각화statusUI라는 함수를 만들어서 isOwner가 true일때 로그인/회원가입 부분을 사용자의 email주소와 로그아웃 버튼으로 치환하도록 하였고 사용자가 라우팅된 위치를 시각화 하기위해 해당하는 위치에서 statusUI를 인자로 주어 태그 속성을 active로 치환하도록 하였습니다. 자바스크립트 인젝션자바스크립트 인젝션을 예방하기 위해서 sanitize-html 모듈을 사용하였습니다. 이 모듈은 악의적인 HTML태그입력을 예방시켜 주는데요.사용자가 입력한 정보에 자바스크립트 코드가 있을경우 이것을 필터링하도록 하여 서버를 보호합니다. 이와같이 입력해주고 데이터베이스에 전달했지만 태그부분이 표시되지 않고 자바스크립트 코드가 작동하지 않는걸 확인할 수 있죠. SQL인젝션mysql모듈에는 sql인젝션을 예방하는 기능이 포함되어 있는데요.1http://localhost:3000/topic/18;drop table board; 이와같이 WHERE 조건 부분에 세미콜론을 붙이고 뒤에 쿼리를 작성하는 방식의 공격을 하더라도 사용자가 입력한 파라미터를 문자열로 치환해서 쿼리가 동작하지 않도록 하게됩니다. 가령 이런식으로 바뀌게 되는 것이죠.1234SELECT board.id AS boardid,comment.*,SUBSTR(comment.date,1,16) AS datetime FROM board LEFT JOIN comment ON board.id=comment.board_id WHERE board.id='18;drop table board;' 그 외 세부기능그외 세부적인 기능으로는 각각의 유저가 자신이 작성한 글과 댓글만을 삭제,수정이 가능하도록 하였구요. 게시물을 삭제하면 그에 해당하는 댓글이 먼저 db에서 삭제된 다음에 게시물이 삭제되도록 하였습니다. 마이페이지내가 작성한 글과 댓글을 mypage에서 확인할 수 있도록 하였는데요.이곳에서 내가 작성한 해당하는 글로 이동할 수도 있고 직접 삭제하는 것도 가능합니다. 회원정보의 수정도 가능하도록 하였구요. 현재 내정보 상태는 form의 placeholder속성으로 표시하도록 해두었습니다. 감사합니다.처음으로 githubhttps://github.com/OneNineIx/nodejs_project","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"nodejs","slug":"programing/nodejs","permalink":"http://OneNineIx.github.io/categories/programing/nodejs/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://OneNineIx.github.io/tags/javascript/"},{"name":"nodejs","slug":"nodejs","permalink":"http://OneNineIx.github.io/tags/nodejs/"}]},{"title":"MySQL 예제모음 마무리","slug":"database-chap15","date":"2018-09-16T21:57:02.000Z","updated":"2018-09-16T22:11:40.666Z","comments":true,"path":"2018/09/17/database-chap15/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/database-chap15/","excerpt":"","text":"[toc] 문제1 그룹함수(갯수)수강신청이 이루어진 강의의 강의번호와 신청횟수를 출력하시오123SELECT 강의_강의번호, COUNT(* ) AS 신청횟수 FROM 수강신청 GROUP BY 강의_강의번호; 해설그룹함수의 종류는 5가지 뿐이다(최대, 최소, 합 ,평균, 갯수)학생이 강의를 수강신청하면 수강신청 테이블에 학생번호, 강의번호 및 신청시각이 기록주어진 질의문을 처리하기 위해서는 수강신청 테이블에서 강의번호가 같은 레코드를 그룹화함COUNT(* ) 함수를 사용하여 그룹별 포함된 레코드의 횟수를 세는 방식으로 처리 문제2 그룹함수(최소)소속학과별 최연소자의 나이가 25이하인 그룹의소속학과와 최연소자_나이를 출력하시오12345SELECT MIN(나이) AS 최연소자_나이 FROM 학생 //떙!!WHERE 나이 &lt;= 25 GROUP BY 소속학과 HAVING 나이 &lt;= 25; 해설GROUP BY 절 사용된 SELECT 문에서 그룹에 대한 조건은 HAVING 절에 기술WHERE 절과 동일하게 연산식을 구성할 수 있으며 그룹에서만 적용가능한 그룹함수 사용 가능 문제3 조인조건다음 중 조인 조건이 기술되는 절은?? 1ON절 // 두 테이블간의 연결조건 해설SELECT 문에서 조인에 대한 조건은 ON절에 기술WHERE 절은 조인 조건 이외의 조건을 기술할 때 사용(레코드에 대한 조건) 문제4 조인조건컴퓨터과학과 소속의 교수의 교수이름, 직위, 그리고 교수가 담당하는 강의이름, 이수구분을 출력하시오 1234SELECT 교수.교수이름, 교수.직위, 강의.강의이름, 강의.이수구분 FROM 교수 INNER JOIN 강의 ON 교수.교수번호 = 강의.교수번호 WHERE 교수.소속학과 = &apos;컴퓨터과학과&apos; 해설조건을 일치하는(강의를 하는) 레코드만을 검색되므로 내부조인(INNER JOIN)이 사용내부조인의 조인 조건 ‘교수.교수번호 = 강의.교수번호’은 ON절에 기술컴퓨터학과 소속의 교수만을 검색하기 위한 조건 ‘교수.소속학과 = ‘컴퓨터과학과’’는 WHERE절에 기술 문제5 셀프조인다음 중 SQL 문 작성 시 테이블의 별칭을 반드시 사용해야 하는 조인 질의 유형은?1셀프조인 // 같은테이블을 조인해서 또다른 정보를 끄집어 낼때 사용하는 조인이므로 해설조인 시 SQL 문의 가독성을 높이고 효율적으로 사용하기 위해서는 테이블의 별칭을 사용자기 자신과 조인하는 셀프조인의 경우 조인하는 테이블 명이 동일하기 때문에 반드시 별칭 사용 문제6 외부조인A와 B 테이블을 조인할 때 A와 B의 공통분모 결합이 존재하는 것을 출력하고,A에는 없고 B에만 있는것도 출력하는 조인은?1오른쪽 외부조인 RIGHT OUTER JOIN 해설내부조인 : 두 집합의 교집합 만을 검색 결과에 포함왼쪽 외부조인 : A를 모두 포함오른쪽 외부조인 : B를 모두 포함완전 외부조인 : 합집합을 검색 결과에 포함 문제7 LEFT OUTER JOIN모든 교수의 교수이름, 직위를 출력하고 해당 교수가 강의를 담당할 경우 강의의 강의이름, 이수구분을 출력하시오123SELECT 교수.교수이름, 교수.직위, 강의.강의이름, 강의.이수구분 FROM 교수 LEFT OUTER JOIN 강의 ON 교수.교수번호 = 강의.교수번호; 해설주어진 질의문을 처리하는데 교수와 강의 테이블이 필요하므로 조인을 사용조인 검색 결과에 강의를 하지 않는 교수에 대한 레코드를 검색 결과에 포함해야 하므로 외부조인을 사용FROM 절에서 교수 테이블은 왼쪽, 강의 테이블은 오른쪽에 위치하므로 LEFT OUTER JOIN을 사용하여 조인 문제8 CREATE VIEW이수구분이 전공과목인 강의를 출력하는 전공강의 뷰를 생성하시오123CREATE VIEW 전공강의 AS // VIEW는 원본에 영향을 주지 않는 가상의 테이블이므로 AS를 사용한다 SELECT * FROM 강의 WHERE 이수구분 LIKE &apos;전공%&apos;; // 부분일치검색 해설뷰 생성은 CREATE VIEW 구문을 사용뷰의 행동을 결정하는 SELECT 문 앞에 AS를 기술전공과목의 종류는 전공필수와 전공선택이 있으므로 ‘전공’이라는 두 글자가 포함된 이수구분을 검색하기 위해서 LIKE 연산자를 사용SELECT * FROM 전공강의; 와 같이 사용 문제9 CALL저장 프로시저를 호출 할 때 사용하는 구문은?1CALL 프로시저명 // 프로시저 안의 절차를 실행해라! 라는 의미 해설함수와 저장프로시저의 차이는?저장 프로시저는 그 자체가 이미 실행될 수 있는 하나의 프로그램이다.데이터베이스 객체로 CALL 명령어를 사용함수는 독립사용 불가 SELECT문 안에 포함해서 사용 문제10 IF THEN다음은 count 변수의 값이 1이면 result 변수에 ‘홀수’를 2면 ‘짝수’를 대입하는 저장프로시저 구문을 작성하시오.1234IF count = 1 THEN SET result = &apos;홀수&apos;else SET result = &apos;짝수&apos;END IF; 해설MySQL에서 조건문은 IF문과 CASE 문으로 제공IF 문은 한 개의 조건은 IF-ELSE문으로 여러개의 조건은 IF-ELSEIF-ELSE 문으로 기술가능 문제11 함수에 대한 설명다음 중 함수에 대한 설명으로 올바르지 않은 것은?12매개변수를 받아들이거나 반환할 수 있다 - 프로시저가 하는 기능이다함수는 함수의 이름으로 어떤 값 하나만을 반환할 수 있다. 해설함수는 저장 프로시저와 유사그러나 저장 프로시저와 다르게 매개변수를 받아들일 수는 있으나 반환은 불가능 문제18 함수에 대한 설명다음 중 데이터 타입이 CHAR(4)인 값을 받아들이고 // 함수는 정확히 따지면 매개변수가 업다. 입력값이다.VARCHAR(10)인 값을 반환하는 ClassLevel 함수에 대한 정의로 옳은것은?12CREATE FUNCTION ClassLevel(abc CHAR(4)) RETURNS VARCHAR(10) 해설함수는 저장 프로시저와 달리 매개변수를 받아들일 수 있으나 매개변수 반환 불가능함수는 매개변수에 IN, OUT, INOUT을 지정하지않음반환하는 값은 RETURNS 키워드와 타입만을 통해 함수의 결과값을 명시한다. 문제19 커서 FETCH커서에서 결과 레코드로부터 현재 커서가 가리키고 있는 포인터의 다음 레코드를 가져오고 커서의 위치를 다음 레코드로 지정하는 명령어는 무엇인가?1FETCH 해설커서란 복수개의 레코드를 가져와서 한 레코드씩 상황에따라 처리하는 것커서는 질의문을 통해 레코드 집합을 가져온 후, 각각의 레코드에 대해서 별도의 처리를 하는 저장 프로그램커서는 DECLARE, OPEN, FETCH, CLOSE 순서로 진행각각의 레코드를 가져올 때 FETCH 명령어를 사용하여 현재 포인터가 가리키는 레코드를 반환하고 포인터를 다음 레코드로 지정 문제20 사용자에 대한 테이블의 접근 권한사용자에 대한 테이블의 접근 권한은 어느테이블에서 관리하는가?1tables_priv 해설user에서는 명령어의 실행 권한만을 설정테이블에 접근 권한은 관리하기 때문에 tables_priv라는 테이블을 사용columns_priv에서는 더욱 세밀하게 테이블의 각 컬럼에 대한 접근 권한을 명시 문제21 권한 GRANT사용자에게 권한을 부여할 때 사용하는 명령어는?1GRANT 해설사용자 추가 또는 권한을 부여할 때는 GRANT 명령어를 사용반대로 부여된 권한을 회수할 때는 REVOKE를 사용 문제22 GRANT 명령어GRANT 명령어 사용 시, ‘KNOU 데이터베이스의 모든 테이블’을 지칭하기 위해 사용하는 표기법으로 올바른 것은?1KNOU.* 해설GRANT 명령어에서 특정데이터베이스에 존재하는 테이블을 지칭하기 위해서 ‘데이터베이스명.테이블명’ 형식의 표기 사용모든 데이터베이스 또는 모든 테이블을 지정할 때는 * 을 대신 사용 문제23 권한을 회수하기 위한 REVOKElocalhost의 student1로부터 학생의 성벌, 전화번호 컬럼에 대한 SELECT 권한을 회수하기 위한 REVOKE 구분에서 밑줄 친 빈칸에 알맞은 키워드는?12REVOKE SELECT(성별,전화번호) ON knou.학생 FROM &apos;student1&apos;@&apos;localhost&apos; 해설REVOKE 문은 사용자에게 부여된 권한을 회수ON절에서 스키마와 테이블을 명시REVOKE절에서 명령어와 컬럼을 ‘명령어(컬럼리스트)’ 형식으로 기술 문제24 트랜잭션 COMMIT트랜잭션이 데이터의 수정 및 변경한 내역을 데이터베이스에 영구적으로 반영하기 위해 사용하는 SQL 명령어는?1COMMIT 해설트랜잭션 관리를 위해 MySQL은 START TRANSACTION, COMMIT, ROLLBACK, SAVEPOINT 명령등을 지원COMMIT은 트랜잭션의 실행 결과를 데이터베이스에 반영하는 기능을 수행ROLLBACK는 트랜잭션의 실행 결과를 실행 이전의 상태로 되돌리는 기능을 수행 문제25 잠금다음 중 동시성 제어를 위해 사용하는 잠금(LOCK)에 대한 설명은?123잠금수준이 높아지면 교착상태가 발생할 확률이 높아진다잠금의 종류에는 READ LOCK, WRITE LOCK이 있다.잠금수준이 높아지면 잠금대상이 늘고 동시성이 떨어진다. 해설잠금 수준이 높아지면 고립성이 강하게 보장잠금 수준이 높아짐에 따라 잠금 대상이 늘어나 동시에 여러 개의 트랜잭션이 수행될 수 있어 동시성이 저하또한 교착상태가 늘어날 수 있어 교착상태 탐지 작업이 필요 문제26 백업백업 방식 중, 전체 백업 이후 주어진 시간 동안 변경된 데이터만을 복제하는 백업 방식은?1증분 백업 해설백업은 백업 대상, 장소, 시기 등에 따라 다양한 방식으로 구분주기적으로 전체 데이터베이스를 백업하는 방식을 전체 백업이라고 하며 전채 백업 이후 변경된 부분의 데이터만 백업하는 방식을 증분 백업이라고 함. 아래 SQL문을 수행 했을때 결과에 포함될 수 있는 레코드가 아닌 것은? SELECT B.강의번호, B.강의이름, B.이수구분, A.교수이름 FROM 교수 A RIGHT OUTER JOIN 강의 B ON A.교수번호 = B.교수번호해설오른쪽 외부조인은 오른쪽 테이블의 모든 레코드 정보를 출력하고 왼쪽 테이블의 레코드를 붙이는 조인따라서 오른쪽의 강의 테이블의 강의번호, 강의이름, 이수구분은 모두 출력하고 조건에 맞는 교수의 교수이름을 출력조건에 맞지 않는 레코드에 대해서는 교수 이름을 NULL로 대체 문제27 서브쿼리다음 명령문의 실행결과는?1234SELECT A.교수번호, A.소속학과, A.전화번호 FROM 교수 AS A WHERE (SELECT COUNT(* ) FROM 강의 AS B WHERE B.교수번호 = A.교수번호) &gt;= 2 답 : 주어진 SQL 문은 교수번호에 따른 강의 수가 2이상 조건에 맞는 교수를 검색하는 질의 해설부속질의는 내부질의를 처리한 후 작성된 데이터를 재활용하여 외부질의를 처리주어진 SQL 문은 교수번호에 따른 강의 수가 2이상 조건에 맞는 교수를 검색하는 질의 문제28 NOT EXISTS강의를 하지 않는 교수의 교수이름, 소속학과를 출력하시오12345SELECT 교수.교수이름, 교수.소속학과 FROM 교수 WHERE NOT EXISTS // 결과가 거짓이면 참 (SELECT * FROM 강의 // 강의테이블에서 교수.교수번호와 강의.강의번호가 일치하는 교수를 모두 조회하고 NOT EXISTS로 조회된 값이 존재하지 않는 것을 참으로 출력 WHERE 교수.교수번호 = 강의.교수번호); 해설강의를 하지 않는 교수는 교수번호가 강의 테이블에 존재하지 않음따라서 각 교수번호로 강의테이블에서 조회하여 검색되는 레코드가 존재하는지 검사하여 결과 생성가능레코드의 존재 여부는 EXISTS와 NOT EXISTS 연산자로 해결가능 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"}]},{"title":"트랜잭션과 백업","slug":"database-chap14","date":"2018-09-16T20:34:36.000Z","updated":"2018-09-16T22:12:15.585Z","comments":true,"path":"2018/09/17/database-chap14/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/database-chap14/","excerpt":"","text":"목차 1. 트랜잭션의 개념2. 잠금의 개념3. 백업과 복원의 개념4. 실습예제 트랜잭션의 개념 서로 연관된 다수의 데이터베이스 명령들로 이루어진 논리적 작업 단위(예를 들면 계좌이체하는 일련의 과정, 계좌조회, 이체, 이체결과 저장, 등등 일련의 명령의 작업 단위) 데이터에 대한 동시에 발생한 작업 요청 처리시 일관성 및 무결성 훼손 문제가 발생하지 않도록 데이터 연산을 단위로 묶어 처리하기 위한 개념 DBMS는 트랜잭션의 4가지 특수성, 일관성, 고립성, 지속성)을 유지 트랜잭션 명령어 하나의 트랜잭션을 정의할 수 있는 4개의 명령어로 구성 START(또는 BEGIN) TRANSACTION - 새로운 트랜잭션을 시작 COMMIT - 트랜잭션에서 변경한 데이터 항목을 영구적으로 시스템에 반영 SAVEPOINT id - 저장 시점 id를 지정 ROLLBACK [TO id] - 트랜잭션의 변경 내역을 모두 목귀하거나 id 저장 시점까지만 복귀 자동커밋 트랜잭션MySQL에서는 기본적으로 모든 실행되는 질의는 실행된 후 사용자의 요청 없이 자동으로 커밋하는 기능을 지원 12345비활성화SET autocommit = 0활성화SET autocommit = 1 명시적 트랜잭션12345678구문형식START TRANSACTION [WITH CONSISTANT SNAPSHOT] [READ WRITE] [READ ONLY] SQL문...COMMIT 또는 ROLLBACK ####트랜잭션의 사용 12345678910구문형식DELIMITER $$CREATE PROCEDURE 프로시저-이름(매개변수)BEGIN DECLARE EXIT HANDLER FOR SQLEXCEPTION // 핸들러는 예외가 발생했을때 ROLLBACK; // SQL문의 오류가 발생했을때 롤백해라는 설정 START TRANSACTION; SQL문; // START TRANSACTION과 COMMIT 사이에 SQL문을 두어서 트랜잭션을 사용한다 COMMIT;END; 잠금의 개념 트랜잭션 간 테이블 접근 순서를 조정 한 트랜잭션이 다른 트랜잭션에서 사용중인 테이블에 대한 접근을 방지 데이터의 무결성 및 일관성을 유지 MySQL은 트랜잭션의 무결성 및 일관성을 유지하기 위해 명시적 잠금을 지원 잠금이 유지되는 동안 다른 트랜잭션은 잠금이 해제될 때까지 대기 잠금의 종류 READ LOCK - 읽기는 가능, 쓰기는 불가능 복수 세션에 의해 취득 가능 12구문형식LOCK TABLES 테이블_이름 READ //다른 트랜잭션이 READ락을 걸어도 허용 WRITE LOCK - 읽기/쓰기 불가능 -단일 세션에 의해서만 취득 가능( 다른사용자가 취득하는 동안 다른 사용자는 읽지도 쓰지도 못하게 하는 설정 ) MySQL의 잠금 데이터의 일관성과 무결성을 보장하기 위해 트랜잭션과 함께 사용 1234567구문형식SET autocommit = 0;START TRANSACTION;LOCK TABLES 테이블_이름 WRITE | READ,...; SQL 문...COMMIT;UNLOCK TABLES; // 트랜젝션이 끝나고 락을 해제하지 않으면 테이블잠김이 풀리지 않아 다른사용자는 테이블을 사용하지 못하게 된다. 백업과 복원의 개념 업무와 관련된 중요 데이터를 저장하기 때문에 문제가 발생할 경우에 대한 대비가 필요 데이터아 트랜잭션에 수행되는 변경 내용과 로그를 주기적으로 별도로 저장하는 작업 백업의 방식, 상태, 대상, 장소에 따라 다양한 형태의 백업 정책 결정 가능 복원은 저장된 백업 데이터를 사용하여 특정 시점으로 데이터베이스를 복귀시키는 작업 백업의 종류 방식별 구분 물리적 백업 - DBMS가 사용하는 데이터 원본파일을 직접 복사하여 백업하는 방식 논리적 백업 - 원본 데이터베이스와 동등한 데이터베이스를 구축하기 위한 DML을 추출하는 방식 상태별 구분 온라인 백업/핫 백업 - DBMS가 운용되고 있는 상태에서 데이터 백업을 진행하는 방식 오프라인 백업/콜드 백업 - DBMS를 정지시킨 상태에서 데이터 백업을 진행하는 방식 대상별 구분 전체 백업 - 데이터베이스에 존재하는 모든 데이터를 백업하는 방식 증분 백업 - 전체 백업 이후 주어진 시간이후에 이루어진 변경된 데이터만을 백업하는 방식 장소별 구분 로컬 백업 - 백업을 수행하는 컴퓨터에 설치되어 있는 DBMS를 백업하는 방식 원격 백업 - 백업을 수행하는 컴퓨터가 아닌 원격으로 연결된 DBMS를 백업하는 방식 방식별 구분 물리적 백업 - MySQL의 데이터파일( .FRM, .MYD,* .MYI)을 복사하여 백업하는 방식 논리적 백업 - 논리적 백업 전용 소프트웨어인 mysqldump를 사용하여 백업 상태별 구분 온라인 백업/핫(Hot) 백업 - Enterprise Edition Hot백업(온라인) 백업을 지원 오프라인 백업/콜드(Cold) 백업 - mysqldump 등의 유틸리티 이용 MySQL에서의 복원 물리적 백업 데이터를 이용한 복원 복제된 데이터 파일( .FRM, .MYD,* .MYI)을 datadir 변수에서 명시한 디렉토리에 복사 물리적으로 백업한 데이터베이스의 하드웨어적 구성요소와 유사한 경우에만 복원가능 논리적 백업 데이터를 이용한 복원 mysql 클라이언트 유틸리티를 사용 12구문형식&gt;&gt;mysql -u 사용자_이름 -p 데이터베이스_이름 &lt;파일_이름 ##실습예제 실습예제(bank스키마 만들기)12345678910CREATE SCHEMA bank; // bank 스키마생성USE bank; // 작업스키마로 선택CREATE TABLE account( user_id VARCHAR(45) NOT NULL, user_name VARCHAR(45) NOT NULL, balance INT NOT NULL DEFAULT 0, // 잔액 컬럼, 기본으로 0설정 PRIMARY KEY (user_id)) TRIGGER 설정 - balance 컬럼은 잔고인데 잔액을 음수로 INSERT, UPDATE 하는 등의 미연 방지12345678DELIMITER $$CREATE TRIGGER balance_check_insert BEFORE INSERT ON account FOR EACH ROW // account테이블에 대해서 항상 각각의 행에대해서 INSERT가 되기 전에 행동하는 트리거를 생성 BEGIN IF (NEW.balance &lt; 0) THEN // 새로운 생성되는 balance 컬럼의 값이 0보다 작을경우 SIGNAL SQLSTATE &apos;45000&apos; SET message_text=&apos;잔액은 음수가 될 수 없습니다.&apos;; END IF; END $$DELIMITER ; TRIGGER -BEFORE UPDATE123456789DELIMITER $$CREATE TRIGGER balance_check_update BEFORE UPDATE ON account FOR // account테이블에 대해서 항상 각각의 행에대해서 UPDATE가 되기 전에 행동하는 트리거를 생성 EACH ROW BEGIN IF(NEW.balance &lt; 0) THEN // 새로운 생성되는 balance 컬럼의 값이 0보다 작을경우 SIGNAL SQLSTATE &apos;45000&apos; SET message_text=&apos;잔액은 음수가 될 수 없습니다.&apos;; END IF; END $$ 더미데이터를 입력해보자12INSERT INTO account VALUES(&apos;0001&apos;,&apos;홍길동&apos;,-10000); 그럼에도 한번 실행해보자 12SELECT * FROM account; // 데이터가 조회되지 않는다 balance 컬럼의 값을 음수가 아닐경우 올바르게 데이터가 들어가는 모습을 볼 수 있다.1234567INSERT INTO account VALUES(&apos;0001&apos;,&apos;홍길동&apos;,4000);INSERT INTO account VALUES(&apos;0002&apos;,&apos;허균&apos;,3000);SELECT * FROM account; 실습예제####홍길동의 계좌에서 1500원을 허균의 계좌로 이체하시오123456789UPDATE account SET balance = balance - 5000 WHERE user_id = &apos;0001&apos;;UPDATE account SET balance = balance + 5000 WHERE user_id = &apos;0002&apos;;SELECT * FROM account; 실습예제2홍길동의 잔액 2500원과 허균의 잔액 4500원인 상태에서 홍길동의 계좌에서 5000원을 허균의 계좌에 송금하시오123456789UPDATE account SET balance = balance - 5000 WHERE user_id = &apos;0001&apos;;UPDATE account SET balance = balance + 5000 WHERE user_id = &apos;0002&apos;;SELECT * FROM account; 이러한 SQL구문이 개별적으로 실행될시 원하는 실행결과를 얻을 수 없게된다그래서 필요한 것이 트랜잭션 구문이다 실습예제3홍길동의 잔액 2500원과 허균의 잔액 4500원인 상태에서 홍길동의 계좌에서 5000원을 허균의 계좌에 트랙잭션을 사용하여 송금하시오123456789101112START TRANSACTION; UPDATE account SET balance = balance - 5000 WHERE user_id = &apos;0001&apos;; UPDATE account SET balance = balance + 5000 WHERE user_id = &apos;0002&apos;; SELECT * FROM account;ROLLBACK; // 문제가 있을시 트랜잭션 시작지점으로 ROLLBACK할 수 있다 1SELECT * FROM account; //확인해보면 롤백된 것을 확인할 수 있다. 하지만 아직 부족하다 결과가 올바르면 COMMIT을 하고 문제가 있으면 ROLLBACK할 수 있도록 할 필요가 있다 실습예제4홍길동의 잔액 3000원과 허균의 잔액 4000원인 상태에서, 홍길동의 계좌에서 5000원을 허균의 계좌로 트랜잭션을 사용하여 송금하시오. 단, 홍길동의 잔액이 부족할 경우, 송금을 취소하시오12345678910111213DELIMITER $$CREATE PROCEDURE send_h_h(amount INT) BEGIN DECLARE EXIT HANDLER FOR SQLEXCEPTION ROLLBACK; // 트리거를 통해 발생한 익셉션일때 실행된다. START TRANSACTION; UPDATE account SET balance = balance - amount WHERE user_id = &apos;0001&apos;; UPDATE account SET balance = balance + amount WHERE user_id = &apos;0002&apos;; COMMIT;END $$DELIMITER ; 123CALL send_h_h(1000);SELECT * FROM account; // 커밋된 결과를 확인 할 수 있다. 123CALL send_h_h(5000);SELECT * FROM account; // 롤백이 제대로 실행되어 자금이체가 제대로 되지 않았다. 물리적데이터 백업방법1C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data 경로에 있는 스키마 전체를 복사하면 된다. 복구 방법은 원래 위치의 저장되어 있는 폴더에 내용물을 덮어써버리면된다. 논리적데이터 백업방법 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"},{"name":"ROLLBACK","slug":"programing/database/ROLLBACK","permalink":"http://OneNineIx.github.io/categories/programing/database/ROLLBACK/"},{"name":"COMMIT","slug":"programing/database/ROLLBACK/COMMIT","permalink":"http://OneNineIx.github.io/categories/programing/database/ROLLBACK/COMMIT/"},{"name":"TRANSACTION","slug":"programing/database/ROLLBACK/COMMIT/TRANSACTION","permalink":"http://OneNineIx.github.io/categories/programing/database/ROLLBACK/COMMIT/TRANSACTION/"},{"name":"HANDLER FOR SQLEXCEPTION","slug":"programing/database/ROLLBACK/COMMIT/TRANSACTION/HANDLER-FOR-SQLEXCEPTION","permalink":"http://OneNineIx.github.io/categories/programing/database/ROLLBACK/COMMIT/TRANSACTION/HANDLER-FOR-SQLEXCEPTION/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"}]},{"title":"권한의 개념","slug":"database-chap13","date":"2018-09-16T19:59:12.000Z","updated":"2018-09-16T20:37:13.403Z","comments":true,"path":"2018/09/17/database-chap13/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/database-chap13/","excerpt":"","text":"목차 1. 권한의 개념2. 시스템 테이블3. 권한 시스템4. 실습예제5. 사용자에게 스키마 권한부여6. SELECT할 수 있는 권한만 부여7. 컬럼조회 권한 회수하기8. 모든권한 회수하기9. 사용자 삭제하기 권한의 개념 허가 되지 않은 사용자가 DBMS에 접속하거나 사용자의 무분별한 데이터 접근을 제어하기 위한 개념 사용자들의 모든 접속 시도 및 질의 실행에 대한 접근 제어 리스트(ACL)기반의 보안정책을 운용 권한시스템 접속 권한 - DBMS 서버에 접근할 수 있는 권한 접근 권한 - 테이블 및 데이터베이스 접근 권한 실행 권한 - SQL 명령어 단위의 실행 권한 권한 시스템 구성요소 시스템 테이블을 사용하여 관리 mysql 스키마에 위치 사용자 및 시스템 관리를 위한 데이터 저장 시스템 테이블 user 테이블 호스트 및 사용자 아이디에 대한 명령어 별 실행 권한 관리 DBMS 접속 및 명령어 실행에 관여 db 테이블스키마 단위의 명령어 실행 권한 관리 tables_priv 테이블테이블 별 명령어 실행 권한 관리 columns_priv 테이블컬럼 별 명령어 실행 권한 관리 권한 시스템요청인증 - SQL 요청에 대한 실행 여부 결정 사용자 추가 및 삭제시스템 테이블을 조작한 사용자 추가는 위험하기 때문에 CREATE USER 문을 권장함 123구문형식CREATE USER &lt;사용자명&gt; IDENTIFIED BY &apos;&lt;패스워드&gt;&apos; DROP USER 문을 사용하여 사용자를 삭제 12구문형식DROP USER &lt;사용자명&gt; 접속 권한 사용자 생성 시 입력된 사용자명과 패스워드 뿐만 아니라 호스트 이름을 확인 사용자 명시 방법 표기 의미 ‘std‘@’knou.ac.kr’ knou.ac.kr에서 접속하는 std 사용자 접속 가능 &#39; &#39;‘@’knou.ac.kr’ knou.ac.kr에서 접속하는 모든 사용자 접속 가능 ‘std‘@’%‘ 모든 호스트에서 접속하는 std 사용자 접속 가능 비밀번호 변경사용자의 비밀번호는 UPDATE USER 구문을 사용하여 변경 1234구문형식UPDATE USER SET password=password(&apos;변경비밀번호&apos;) WHERE USER=&apos;사용자_이름&apos; AND HOST=&apos;호스트_이름&apos; // 이렇게 명시해줘야 지정한 사용자의 패스워드가 변경된다 모든 권한을 갖는 root 사용자의 비밀번호를 설정하고 주기적으로 변경하는 것이 중요 권한 변경권한 부여는 GRANT 명령어를 사용 1234구문 형식GRANT &lt;권한&gt; [(&lt;컬럼 리스트&gt;)] ON&lt;대상&gt; TO&lt;사용자명&gt;@&apos;&lt;호스트명&gt;&apos; 권한 제거는 REVOKE 명령어 사용 1234구문형식REVOKE &lt;권한&gt; [(&lt;컬럼리스트&gt;)] ON &lt;대상&gt; FROM&lt;사용자명&gt;@&apos;&lt;호스트명&gt;&apos; 실습예제localhost에서 접속하며 비밀번호가 ‘1234’인 ‘student1’이라는 이름의 사용자를 생성하시오 12CREATE USER &apos;student1&apos; @&apos;localhost&apos; IDENTIFIED BY &apos;1234&apos; localhost에서 접속하며 사용자 아이디가 ‘student2’이고 비밀번호가 ‘1234’이다.하지만 첫 연결시 무조건 암호를 변경하도록 하시오.12CREATE USER &apos;student2&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;1234&apos; PASSWORD EXPIRE; 사용자에게 스키마 권한부여‘localhost’에서 접속하며 비밀번호가 ‘1234’인 ‘student1’이라는 사용자에게 ‘knou’데이터베이스에 대한 모든 권한을 부여하시오1234GRANT ALL PRIVILEGES ON knou.* // knou스키마에 대해서 모든권한을 부여 TO &apos;student1&apos;@&apos;localhost&apos;//이로인해 student1 사용자도 schemas워크스페이스에서 knou스키마를 확인할 수 있게된다. SELECT할 수 있는 권한만 부여‘student2’라는 사용자에게 ‘강의’ 테이블의 ‘강의번호’, ‘강의이름’, ‘강의실’ 컬럼에 접근 할 수 있는 권한을 부여하시오 1234567GRANT SELECT(강의번호, 강의이름, 강의실) ON knou.강의 //knou스키마에 있는 강의테이블에 대해서 해당 컬럼에 SELECT할 수 있는 권한만 부여 TO &apos;student2&apos;@&apos;localhost&apos;//스키마를 확인해보면 강의테이블과 3개의 컬럼만 확인할 수 있다.select 강의이름, 강의실, 강의번호 from 강의; //는 가능하지만select * from 강의; // 는 3개 컬럼 외에 권한 부여가 되어있지 않기때문에 에러가 발생. 컬럼조회 권한 회수하기REVOKE 문을 사용하여 ‘student2’가 가지고 있는 ‘강의’테이블의 ‘강의번호’ 컬럼에 대한 select 권한을 회수하시오12345REVOKE SELECT(강의번호) ON knou.강의 FROM &apos;student2&apos;@&apos;localhost&apos;select 강의이름, 강의실, 강의번호 from 강의; // 그리고 실행해보면 에러가 발생한다 // 강의번호 컬럼에 대한 권한이 상실했기 때문이다 모든권한 회수하기REVOKE 문을 사용하여 ‘student1’이 가지고 있는 ‘knou’데이터베이스에 대한 모든 권한을 회수하시오1234REVOKE ALL PRIVILEGES ON knou.* FROM &apos;student1&apos;@&apos;localhost&apos;use knou // knou 스키마를 작업스키마로 선택하겠다고 실행해보면 접속이 불가능하다고 나온다 사용자 삭제하기‘localhost’의 사용자 ‘student2’ 계정을 삭제하시오1DROP USER &apos;student2&apos;@&apos;localhost&apos; 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"권한부여","slug":"권한부여","permalink":"http://OneNineIx.github.io/tags/권한부여/"},{"name":"시스템테이블","slug":"시스템테이블","permalink":"http://OneNineIx.github.io/tags/시스템테이블/"}]},{"title":"함수와 커서 그리고 트리거","slug":"database-chap12","date":"2018-09-16T19:21:31.000Z","updated":"2018-09-16T20:33:53.013Z","comments":true,"path":"2018/09/17/database-chap12/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/database-chap12/","excerpt":"","text":"목차 1. 함수의 개념2. 커서의 개념3. CONTINUE 핸들러4. 트리거의 개념5. 함수실습 예제 함수의 개념 MySQL은 문자, 수학, 날짜 그룹함수 등 많은 편리한 함수를 제공 이와 별도로 사용자가 직접 함수를 정의해서 사용하는 사용자 정의 함수 기능을 제공 저장 프로시저와 유사하게 프로그래밍이 가능 RETURN 문에 의해 특정 값 반환 기능 저장 프로시저는 CALL 명령에 의해 호출되지만 함수는 SELECT 문에 포함되어 실행(독립적인 실행이 불가능) BEGIN ~ END 블록 안에서 결과 셋을 반환하는 SQL문 사용이 불가능 12345678구문형식CREATE [DEFINER=&#123;사용자|현재사용자&#125;] FUNCTION 함수명([매개변수[ , ...]]) // IN 매개변수 역할 RETURNS 데이터 타입 //OUT 매개변수 역할BEGIN SQL 문END 함수와 저장프로그램의 차이 큰차이는 없다 매개변수와 선언부의 차이만 조금있다. 선언부의 차이 저장프로그램(프로시저) 123CREATE PROCEDURE 프로시저_이름( IN 변수_이름1 데이터타입1, OUT 변수_이름2 데이터타입2) 함수 123CREATE FUNCTION 함수_이름 (변수_이름 데이터 타입1) RETURN 데이터 타입2 호출 방법의 차이 저장프로그램 12CALL 저장프로그램_이름(입력_매개변수, 출력_매개변수);SELECT 출력_매개변수; 함수 12SELECT 함수_이름(컬럼_이름) FROM 테이블_이름 함수는 반드시 SELECT 문에 포함되어 사용되는데 , 함수이름(컬럼이름) 이 바로 입력값이 되고, RETURN을 통해 또다른 값으로 대치되어 SELECT문이 동작할때 함수의 결과값이 SELECT문에 포함되어 출력된다. 커서의 개념 어떤 레코드를 처리해야 하는지 가리키는 포인터이다 커서(cursor)는 테이블에서 SELECT 문을 사용하여 여러개의 레코드를 질의한 후, 질의 결과인 집합에서 한 레코드씩 처리하면서 한번에 여러개를 처리하기 위해 사용하는 방식 순차적(전방향)으로 읽기만 가능, 이전에 읽었던 레코드를 다시 읽기는 불가능하다. 레코드를 삭제하거나 수정이 불가능(레코드 처리결과를 임시적으로 재처리해 출력을 해주는 역할만 가능할 뿐 처리결과를 DBMS에 다시 반영할수는 없다. 저장 프로시저, 함수, 트리거에서 사용 가능 커서의 선언은 변수의 선언 다음 커서의 선언과 열기 커서의 이름과 커서가 실행할 SQL문을 지정하여 커서를 선언 123구문형식DECLARE 커서명 CURSOR FOR SELECT 문 커서를 초기화하고 SQL문을 실행 12구문형식OPEN 커서명 커서의 사용과 닫기 SELECT 문에 대한 결과 레코드의 각 컬럼에 대응하는 변수를 지정 12구문형식FETCH 커서명 INTO 변수명 [, 변수명]... 커서 사용 후, 커서에 사용된 자원을 반납 12구문형식CLOSE 커서명 CONTINUE 핸들러 FETCH를 호출할 때 더 이상 레코드가 없을 경우 오류 이벤트가 발생 오류 이벤트에 지정된 동작으로 반응하도록 별도의 핸들러 작성이 필요 123구문형식DECLARE CONTINUE HANDLER FOR NOT FOUND SQL문 트리거의 개념 테이블에 조작이 이뤄질 때, 자동으로 지정된 애플리케이션이 동작 한다든지 다른 테이블의 데이터를 조작하도록 설계된 저장 프로그램 BEFORE(입력전에) , AFTER(입력후에) 의 시점차이와 INSERT, UPDATE, DELETE 세가지 동작밖에 없다 시점과 이벤트 트리거 시점 - 트리거가 실행될 시점을 명시 트리거 이벤트 - INSERT, UPDATE, DELETE이벤트 발생 시 구동 123구문형식(BEFORE | AFTER) (INSERT | UPDATE | DELETE) ON 테이블명 트리거 구문형식123456789구문형식CREATE TRIGGER 트리거 이름 트리거 시점 트리거 이벤트 ON 테이블_이름 FOR EACH ROWBEGIN SQL문END 트리거 명명규칙 트리거의 반응 시점과 트리거의 이벤트를 트리거 이름에 반영 하여 혼란을 최소화 트리거 이름이 중복되지 않게 하기 위한 명명규칙이 필요 의무적인 규칙이 아닌 가이드라인 12구문형식(BEFORE | AFTER)_테이블이름_(INSERT | UPDATE | DELETE) 함수실습 예제인원제한에 따른 강의실을 알고싶다! 하지만 저장프로시저는 SELECT문 안에는 들어갈수 없다. 그럴때 사용하는 것이 함수!12SELECT 강의번호, 인원제한, ???(강의번호) AS 강의실 FROM 강의; 123// 이 명령문을 실행해야 함수를 생성할 수 있다!SET GLOBAL log_bin_trust_function_creators = 1; 함수의 작성예12345678910111213141516171819202122232425DELIMITER $$CREATE FUNCTION ClassLevel(p_ClassNumber CHAR(4)) //함수는 IN매개변수, OUT매개변수를 구별하지 않는다. RETURNS VARCHAR(10) // 함수는 반환하려는 매개변수의 이름으로 반환하는게 아니라 곧바로 함수의 결과가 값으로 반환BEGIN // 함수의 동작부분 DECLARE p_ClassLevel VARCHAR(20); // 변수를 선언하고 DECLARE classlimit INT(11); SELECT 인원제한 INTO classlimit FROM 강의 //인원제한 컬럼만을 가져오고 그것을 classlimit이라는 변수에 집어넣겠다 WHERE 강의번호=p_ClassNumber; // 사용자가 입력한 강의번호와 같은 강의레코드를 가져오는데 IF classlimit &gt; 80 THEN // 인원제한 컬럼값이 80보다 작으면 SET p_ClassLevel=&apos;대강의실&apos;; // p_ClassLevel에 &apos;대강의실&apos;을 set한다 ELSEIF (classlimit &lt; 80 AND classlimit &gt;= 40) THEN SET p_ClassLevel=&apos;중강의실&apos;; ELSE SET p_ClassLevel=&apos;소강의실&apos;; END IF; RETURN (p_ClassLevel);END$$DELIMITER ; 함수의 사용123SELECT 강의번호, 인원제한, ClassLevel(강의번호) AS 강의실 FROM 강의; WHERE 인원제한 &gt;=200 커서의 사용123456789모든 강의 레코드에서 인원제한이 50명 이상인 과목들을 한 줄의 문자열로 연결하여 반환하는 프로시저를 생성하시오DECLARE lecture_cursor CURSOR FOR //커서의 선언 SELECT 강의이름, 인원제한 FROM 강의; //모든 강의테이블의 강의이름과 인원제한 레코드값OPEN lecture_cursor;get_lecture : LOOP // FETCH가 더이상 되지 않을떄까지 루프를 돌게하는 설정 FETCH lecture_cursor INTO v_lecture, v_limit; // FETCH를 하게되면 첫번째 레코드에 있는 강의이름의 값이 v_lecture변수안에, 인원제한의 값이 v_limit변수안에 들어가게 된다. 전체스크립트1234567891011121314151617181920212223242526272829303132333435363738DELIMITER $$CREATE PROCEDURE build_lecture_list // 기능을 하는 프로시저를 생성 (INOUT lecture_list VARCHAR(4000)) // 입력과 출력을 동시에 할 수 있는 매개변수 선언BEGIN DECLARE v_finished INTEGER DEFAULT 0; // 모든 레코드가 한번씩 훑어졌는지 확인하기 위해 사용되는 변수 DECLARE v_lecture VARCHAR(100) DEFAULT &quot;&quot;; //강의의 이름을 저장하기 위한 변수 DECLARE v_limit INTEGER DEFAULT 0; // 강의의 인원제한 값을 저장하기 위한 변수 DECLARE lecture_cursor CURSOR FOR SELECT 강의이름, 인원제한 FROM 강의; DECLARE CONTINUE HANDLER // 맨마지막 커서의 루프를 돌고나서 끝났을때 오류형태가 나오는것을 해결하기 위해 커서를 종료하는 설정 FOR NOT FOUND SET v_finished=1; // FETCH가 더이상 없으면 v_finished에 1을 SET한다 OPEN lecture_cursor; get_lecture : LOOP FETCH lecture_cursor INTO v_lecture, v_limit; IF v_finished=1 THEN // FETCH의 루프가 마지막에 다다랐는지 확인하는 설정 현재 0이므로 통과하게됨. LEAVE get_lecture; // HANDLER가 작동하고 마지막 루프를 종료 END IF; IF v_limit &gt;= 50 THEN // 인원제한이 50명 이상이면 SET lecture_list = CONCAT(v_lecture, &quot;; &quot;, lecture_list); // lecture_list 매개변수에 강의의 이름을 붙여 누적시켜나간다. END IF;END LOOP get_lecture;CLOSE lecture_cursor;END $$DELIMITER ; 커서 실행 확인하기123SET @lecture_list = &quot;&quot;; // 빈문자열 변수를 세트하고CALL build_lecture_list(@lecture_list); // 만든 커서가 담긴 프로시저 실행결과를 변수 @lecture_list에 담는다SELECT @lecture_list; // 불러와보자. 트리거 작성방법12345678910111213141516학생 테이블에 UPDATE 문이 실행되기 전에 &apos;학년&apos; 컬럼에 입력되는 값이 학년의 범위를 넘어가는 값인지 체크하여 1보다 작을 경우 1로 바꾸고, 4보다 클 경우 4로 변경하시오DELIMITER $$CREATE TRIGGER before_학생_update // 트리거명을 이렇게 지어놓으면 어떤 동작을 하는지 트리거인지 알기 쉽다 BEFORE UPDATE ON 학생 FOR EACH ROWBEGIN IF NEW.학년 &lt; 1 THEN // NEW는 수정하려는 레코드의 값 SET NEW.학년 = 1; ELSEIF NEW.학년 &gt; 4 THEN SET NEW.학년 = 4; END IF;END $$DELIMITER ;작성된 트리거는 테이블에 존재해서 확인할 수 있다. 트리거가 잘 작동되었는지 확인하기1234567UPDATE 학생 SET 학년 = 0 // 학년을 0이 세트될수 없도록 트리거를 작성했으므로 WHERE 학생번호 = &apos;201258047&apos;;SELECT * FROM 학생;//결과값으로 최규성학생은 1학년으로 바뀌어있다. 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"TRIGGER","slug":"TRIGGER","permalink":"http://OneNineIx.github.io/tags/TRIGGER/"},{"name":"FUNCTION","slug":"FUNCTION","permalink":"http://OneNineIx.github.io/tags/FUNCTION/"},{"name":"CURSOR","slug":"CURSOR","permalink":"http://OneNineIx.github.io/tags/CURSOR/"},{"name":"CONTINUE","slug":"CONTINUE","permalink":"http://OneNineIx.github.io/tags/CONTINUE/"}]},{"title":"저장프로그램(PROCEDURE,FUNCTION,TRIGGER,CURSOR)","slug":"database-chap11","date":"2018-09-16T17:16:24.000Z","updated":"2018-09-16T20:01:20.882Z","comments":true,"path":"2018/09/17/database-chap11/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/database-chap11/","excerpt":"","text":"목차 1. 저장 프로그램의 개념2. 변수 선언(DECLARE)과 할당3. 저장프로시저의 개념4. IF 문5. CASE 문6. WHILE 문7. REPEAT 문8. LOOP 문9. 예제활용 저장 프로그램의 개념 SQL은 비절차적 언어로 일반 프로그래밍 언어와 달리 실행 흐름을 제어하는 기능 불포함 변수 및 선택문, 반복분과 같은 제어문의 기능을 추가하고 프로그램의 형태로 DBMS 내부에 하나의 데이터베이스 객체로 저장되어 관리 저장 프로시저 함수 트리거 커서 저장 프로그램의 장단점장점 네트워크 전송 효율 향상 실행속도의 효율성 향상 모듈화 기능 (객체를 하나하나 묶어서 또다른 기능을 사용가능하게 한다) 보안 향상 (악의적인 사용자가 테이블의 구체적인 구조를 모르게 할 수있다.) 단점 낮은 처리 성능 디버깅 기능 제한 변수 선언(DECLARE)과 할당 저장프로그램이 실행되는 동안, 데이터를 임시적으로 저장하도록 할당된 메모리 공간 사용자 정의변수 - 저장프로그램 외부에서 사용 이름이 @ 로 시작하며 데이터 타입이 미지정 로컬 변수 - 저장 프로그램 내부에서 사용 DECLARE 명령을 사용하여 선언 123구문형식DECLARE 변수_이름[ ,...] 데이터 타입[(크기)] [DEFAULT 기본값] 할당 정의된 변수에 값을 할당하기 위해서 SET 명령 또는 SELECT INTO 문을 사용 12구문형식 1SET 변수_이름 = 값 1234구문형식 2SELECT 컬럼또는함수 INTO 변수_이름 FROM 테이블 // 할당하려는 값이 테이블에 있을때는 SELECT INTO구문을 사용한다. [WHERE 조건] 저장프로시저의 개념 여러 가지 응용 작업 중 자주 사용되거나 복잡한 과정을 거치는 SQL 문을 저장하여 하나의 객체로 관리하는 기능 = 루틴(routine) 함수와 달리 이름을 이용하여 값을 반환하지 않음 매개변수를 받아 들이거나 반환 프로시저 내에서 또 다른 프로시저를 호출 실행과 관련된 결과값과 메시지를 반환 12345678910구문형식DELIMITER $$CREATE [DEFINER=&#123;사용자|현재사용자&#125;] PROCEDURE 프로시저_이름 ([매개변수[ ,...]]) BEGIN SQL 문...; END $$DELIMITER; 저장 프로시저의 호출 저장 프로시저는 독립적으로 사용 SELELCT나 UPDATE같은 SQL문에서 호출 불가능 별도의 CALL 명령어를 사용 12구문형식CALL 프로시저_이름[([매개변수[ ,...]])] 저장 프로시저의 관리 수정은 ALTER PROCEDURE 명령 사용 저장 프로시저의 보안 및 동작 방식에 대한 속성을 변경할 때만 사용 저장 프로시저의 정의 수정은 DROP 후 CREATE 문으로 새롭게 생성 삭제는 DROP PROCEDURE 문 사용 12구문형식DROP PROCEDURE 프로시저_이름 매개변수 실행 시, 외부로부터 값을 받거나, 실행 후 반환되는 값을 저장 IN 매개변수 - 호출 시 필요간 값을 저장 프로시저에 전달 OUT 매개변수 - 저장 프로시저에서 실행한 값을 호출한 곳으로 전달 INOUT 매개변수 - IN과 OUT의 기능을 모두 수행 절차의 표현 선택문 주어진 명령문을 조건에 따라 실행 여부를 결정 MySQL은 IF-ELSEIF-ELSE, CASE 문을 제공 중첩을 통해 보다 상세한 조건 결정 가능 반복문 주어진 명령문을 특정 횟수만큼 반복 MySQL은 WHILE, REPEAT, LOOP문을 제공 반복문 제어를 위해 LEAVE와 ITERATE 문을 사용 IF 문 주어진 조건이나 식의 값에 따라 SQL문의 실행 여부를 선택적으로 결정 12345678구문형식IF 조건식 THEN SQL문[ELSEIF 조건식 THEN SQL문][ELSE SQL문]END IF; CASE 문 조건식이 다수의 조건으로 표현되는 문제에 대해 다중 IF-ELSEIF 문을 축약하는 제어문 1234567구문형식CASE 변수 WHEN 비교변수값1 THEN SQL문 [WHEN 비교변수값2 THEN SQL문] ... [ELSE SQL문]END CASE; WHILE 문 반복 루프의 조건식이 참일 경우 DO와 END WHILE 사이의 SQL문을 실행하고 거짓일 경우 반복 종료 1234구문형식WHILE 조건식 DO SQL문;END WHILE; REPEAT 문 UNTIL 조건식이 거짓인 동안에 REPEAT와 UNTL 사이의 SQL 문을 반복 WHILE 문은 조건이 참인 동안, REPEAT는 거짓인 동안 반복 SQL 문을 최소한 한번은 실행한 다음에 조건식을 판단 DO WHILE문과 비슷하다 12345구문형식REPEAT SQL문;UNTIL 조건식END REPEAT; LOOP 문 LABLE을 이용하여 반복 블록의 생성하여 반복 후, LEAVE 문을 통해 반복을 종료 ITERATE 문을 만나면 이후에 나온 코드는 실행하지 않고 반복을 처음부터 실행 12345구문형식레이블_이름:LOOP SQL문; IF 조건 THEN LEAVE 레이블_이름;END LOOP; 예제활용‘학생’테이블에서 모든 학생의 정보를 출력하는 GetAllStudent라고 하는 저장 프로시저를 생성하시오123456DELIMITER $$CREATE PROCEDURE GetAllStudent() BEGIN SELECT * FROM 학생; // 명령문의 끝에 세미콜론을 붙여주면 이 명령문의 끝인지 함수의 끝인지 구분할 수 없다. END $$DELIMITER ; // 그래서 DELEMETER를 사용해 함수의끝은 END$$로 마무리해주고 명령문의 끝과 DELIMITER 끝에는 세미콜론을 붙여 구분해준다 프로시저의 실행방법1CALL GetAllStudent(); 프로시저의 삭제방법1DROP PROCEDURE GetAllStudent; 주어진 학년에 해당하는 학생의 정보를 출력하는 GetStudentByGrade라고 하는 저장 프로시저를 생성하시오1234567DELIMITER $$CREATE PROCEDURE GetStudentByGrade( // 매개변수를 입력 IN grade INT(4)) // 입력에 대한 매개변수이므로 IN (변수명) (타입)을 입력해준다 BEGIN SELECT * FROM 학생 WHERE 학년 = grade; // 사용자가 입력한 grade라고 하는 입력 매개변수에 들어있는 값과 똑같은 것만 가져와라 END$$DELIMITER ; 매개변수를 사용한 프로시저의 실행1CALL GetStudentByGrade(1); //매개변수에 1을 입력해서 출력하고있다. ‘강의’테이블의 강의 레코드에서 인원제한이 80보다 클 경우 ‘대강의실’, 40이상 80이하일 경우 ‘중강의실’, 그외에는 ‘소강의실’을 반환하는 저장 프로시저를 생성하시오12345678910111213141516171819202122232425DELIMITER $$CREATE PROCEDURE GetClassLevel( // 함수명과 매개변수 설정 IN p_ClassNumber char(4), // 사용자가 입력하는 IN매개변수(강의번호) OUT p_ClassLevel varchar(20)) // 출력 결과 값이 저장되는 OUT매개변수BEGIN DECLARE classlimit int; // classlimit 이라는 변수를 만들고 SELECT 인원제한 INTO classlimit FROM 강의 //인원제한 컬럼만을 가져오고 그것을 classlimit이라는 변수에 집어넣겠다 WHERE 강의번호 = p_ClassNumber; //사용자가 입력한 강의번호와 같은 강의레코드를 가져오는데 IF classlimit &gt;= 80 THEN // 변수에 담긴 인원제한 컬럼값이 80이상이면 SET p_ClassLevel = &apos;대강의실&apos;; //p_ClassLevel OUT매개변수에 &apos;대강의실&apos;을 결과값으로 저장 ELSEIF (classlimit &lt; 80 AND classlimit &gt;= 40) THEN SET p_ClassLevel = &apos;중강의실&apos;; ELSE SET p_ClassLevel = &apos;소강의실&apos;; END IF;END$$DELIMITER ; 프로시저의 실행123CALL GetClassLevel(&apos;CO21&apos;, @level); // GetClassLevel프로시저에 강의번호&apos;CO21&apos;을 매개변수로 넣고 , 그 값을 사용자가 지정하는 변수@level에 담는다SELECT @level; // 그리고 사용자가 지정한 변수로 조회하면 된다. 정수 p_num과 p_sum을 매개변수로 받아서 1부터 p_num까지의 합을 p_sum에 저장하는 저장프로시저를 생성하시오1234567891011121314151617DELIMITER $$CREATE PROCEDURE WhileLoopProc( IN p_num int(4), // 사용자에게 입력받는 값까지의 합을 구할것이다. OUT p_sum INT(4))BEGIN DECLARE x INT; // 일종의 로컬변수 x를 만들고 SET x = 1; // x에 1로 초기화 SET p_sum = 0; // 사용자에게 전달할 최종 출력값이 될 변수 p_sum에는 일단 0으로 초기화한다. WHILE x &lt;= p_num DO // x가 사용자가 입력한 p_num값보다 클떄까지 SET p_sum = p_sum + x; // 두 로직을 반복한다 SET x = x + 1; END WHILE;END$$DELIMITER ; 해당 프로시저를 실행해보자12CALL WhileLoopProc(10, @sum);select @sum; 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"}]},{"title":"데이터의 검색2(부속질의,뷰)","slug":"database-chap10","date":"2018-09-16T16:56:28.000Z","updated":"2018-09-16T20:01:20.249Z","comments":true,"path":"2018/09/17/database-chap10/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/database-chap10/","excerpt":"","text":"목차 1. 부속질의의 개념 (서브쿼리)2. 뷰의 개념3. 뷰의 생성4. 뷰의 수정 및 삭제5. 뷰를 이용한 데이터 검색6. 뷰를 이용한 데이터 수정7. 예제목록 부속질의의 개념 (서브쿼리) 주 질의라고 하는 검색 질의문 내부에 또 다른 검색 질의문(부 질의)이 내포되어 있는 형태의 질의문 일반적으로 부 질의의 처리결과를 주 질의에서 재사용 비교연산자(=, &gt;, &gt;=, &lt;=, &lt;&gt;)및 IN, NOT IN, EXISTS, NOT EXISTS와 같은 특수연산자를 사용 연산자에 따라 부속질의가 처리되는 방법이 결정 123456구문 형식1SELECT 컬럼1, 컬럼2, ..., 컬럼n FROM 테이블1 WHERE 컬럼i연산자(SELECT 컬럼j //WHERE절에 서브쿼리가 있다. FROM 테이블2 WHERE 조건) 123456구문형식 2SELECT 컬럼1, 컬럼2, ..., 컬럼m FROM(SELECT 컬럼1, 컬럼2, ...,컬럼m // FROM절에 서브쿼리가 있다. FROM 테이블 WHERE 조건) WHERE 조건 뷰의 개념 뷰(VIEW)는 실제 존재하는 데이터를 저장하고 있는 하나 이상의 테이블을 근거로 생성되는 가상의 테이블(virtual table) - 데이터베이스 객체 뷰는 실제 테이블 및 레코드가 물리적으로 존재하는 것처럼 보이지만 뷰의 정의만을 가지고 있는 유도된 테이블 (실제 SELECT문으로만 정의되어 있다.) 작업 결과를 임시로 보관하거나 복잡한 질의를 간소화하기 위해 사용 뷰의 효과 데이터 독립성: 원본 테이블의 구조가 바뀌어 뷰를 이용한 작업은 정의만 변경되어 응용프로그램에 영향이 없음 데이터 보안: 사용자에게 원본 테이블의 일부 컬럼에 대한 접근을 허용하여 보안효과를 향상 다양한 구조의 테이블 사용: 사용자의 요구사항에 맞는 테이블의 구조를 제공 작업의 단순화: 복합한 질의문을 뷰로 단순화 데이터 무결성: WITH CHECK OPTION을 이용하여 뷰 생성에 위배되는 수정작업을 거부 뷰의 생성 생성되는 뷰의 구조는 SELECT 문의 결과로 결정 123456구문형식CREATE VIEW 뷰_이름 AS SELECT 컬럼1, 컬럼2, ..., 컬럼n FROM 테이블_이름 [WHERE 조건][WITH CHECK OPTION] 뷰의 수정 및 삭제 뷰의 수정은 뷰의 생성과 동일하게 새로운 SELECT 문의 결과로 반영 12345구문형식ALTER VIEW 뷰_이름(컬럼1, 컬럼2, ..., 컬럼n) AS // 본래 원본테이블의 컬럼명을 쓰고싶지 않다면 괄호안 컬럼명을 임의로 지정할 수 있다. SELECT 컬럼1, 컬럼2, ..., 컬럼n FROM 테이블_이름 [WHERE 조건] 12구문형식DROP VIEW 뷰_이름 //데이터를 직접적으로 저장하고 있는 형태가 아니기 때문에 훨씬 안전하다. 뷰를 이용한 데이터 검색 사용자에게 뷰와 테이블은 동일하게 인식 뷰를 통한 검색은 테이블을 이용한 검색과 동일 123구문형식(우리가 사용하는 방식)SELECT 컬럼1, ..., 컬럼2 FROM 뷰_이름 [WHERE 조건] 123실행형식(실제 내부적인 작동방식)SELECT 컬럼1, ..., 컬럼2 FROM 뷰_이름 [WHERE 조건] AND 뷰정의_조건 뷰를 이용한 데이터 수정 뷰에 대한 DML 문은 원본 테이블에서 실행 PRIMARY KEY, NOT NULL 등의 제약사항이 위배되는 경우 삽입이 불가능(원본테이블의 제약사항을 어길수 없음) 원본 테이블에 존재하는 컬럼이지만 뷰에는 없는 컬럼에 삽입하는 경우 실행 불가능 조인 질의 또는 그룹 질의가 적용된 뷰는 데이터 삽입 및 수정이 불가능(왜냐하면 원본테이블의 구조가 완벽히 무너진 구조이기 때문에 수정삭제 불가능) WITH CHECK OPTION이 적용된 뷰는 위배되는 사항은 없지만 뷰에 맞지 않는 조건일 경우 실행 불가능 ##예제연습학생 테이블에서 전체 학생 나이의 평균보다 나이가 많은 학생의 학생번호, 학생이름, 나이, 전화번호, 주소를 출력하시오 123SELECT A.학생번호, A.학생이름, A.나이, A.전화번호, A.주소 FROM 학생 AS A WHERE A.나이 &gt;= (SELECT AVG(B.나이) FROM 학생 AS B) 수강신청과 강의테이블을 사용하여 수강신청이 이루어진 강의의 강의정보를 출력하시오1234567EXISTS : 존재한다면SELECT 강의.* FROM 강의 WHERE EXISTS (SELECT * FROM 수강신청 WHERE 강의.강의번호 = 수강신청.강의_강의번호) // 강의가 수강신청 되면 수강신청테이블에 강의번호가 추가되므로그리고 이러한 형태의 레코드 조건값이 있는지, 없는지(EXISTS) 학생 테이블에서 컴퓨터과학과 학생만 출력할 수 있는 ‘컴과학생’이라는 뷰를 생성하시오123456789이러한 형태의 뷰를 만들어 놓음으로써 컴과학생만 조회하면 컴퓨터과학과 학생들을 출력해볼 수 있다.CREATE VIEW 컴과학생 AS //뷰는 일종의 앨리어스다. SELECT * FROM 학생 WHERE 소속학과 = &apos;컴퓨터과학과&apos;SELECT * FROM 컴과학생 // VIEW에 대한 접근방법은 테이블과 완전히 동일하다. 컴과학생 뷰에서 성별이 남자인 학생의 정보를 출력하시오1234567SELECT * FROM 컴과학생 WHERE 성별 = &apos;남&apos; // 이렇게 뷰로 조회하면SELECT * FROM 학생 WHERE 소속학과 = &apos;컴퓨터과학과&apos; AND 성별 = &apos;남&apos; // 내부적으로는 이렇게 AND를 붙여서 여러 조건을 붙이는것처럼 동작한다는 의미 강의 테이블에서 인원제한이 100명 이상인 강의의 강의번호, 강의이름, 교수번호, 인원제한 컬럼만을 출력할 수 있는 ‘대강의’ 뷰를 생성하시오1234567CREATE VIEW 대강의2(강의번호, 강의이름, 교수번호, 인원수) AS // 뷰이름 옆에 컬럼을 별도로 명시해주면 컬럼이름을 변경해서 지정할 수 있다. SELECT 강의번호, 강의이름, 교수번호, 인원제한 FROM 강의 WHERE 인원제한 &gt;= 100SELECT * FROM 대강의2 대강의2 뷰에서 인원수 컬럼의 이름을 인원제한으로 변경하시오1234ALTER VIEW 대강의2(강의번호, 강의이름, 교수번호, 인원제한) AS SELECT 강의번호, 강의이름, 교수번호, 인원제한 FROM 강의 WHERE 인원제한 &gt;=100 대강의2 뷰를 삭제하시오1DROP VIEW 대강의2 컴과학생 뷰를 이용하여 학생번호 201426007, 소속학과 컴퓨터과학과, 학생이름 정제용, 2학년, 남학생, 나이27세, 전화번호 020-5486-1354, 주소 서울시 성북구에 해당하는 학생정보를 입력하시오1234INSERT INTO 컴과학생 VALUES(&apos;201426007&apos;,&apos;컴퓨터과학과&apos;,&apos;정제용&apos;,&apos;2&apos;,&apos;남&apos;,&apos;27&apos;,&apos;020-5486-1354&apos;,&apos;서울시 성북구&apos;);SELECT * FROM 학생; //뷰를 통해서도 레코드 삽입이 가능하다. 대강의 뷰를 이용하여 강의번호 C001, 강의이름 컴퓨터의 이해, 교수번호 C029, 인원제한 300, 강의실 강당, 강의시간 월요일 4~6교시인 강의정보를 입력하시오123456INSERT INTO 대강의 VALUES(&apos;C001&apos;,&apos;컴퓨터의이해&apos;,&apos;CO29&apos;,300,&apos;강당&apos;,&apos;월요일 4~6교시&apos;); // 에러!!SELECT * FROM 대강의 // 컬럼이 강의번호, 강의이름, 교수번호, 인원제한만 가지고 있으므로 컬럼수가 맞지않아 레코드가 삽입되지 않음.조작된 VIEW에는 조작된 컬럼에 대해서만 레코드 삽입이 가능하게된다. 이 이외의 컬럼 조작은 불가능하다. 소속학과별 학생의 평균나이를 확인할 수 있는 ‘학과평균나이’뷰를 생성하시오123456CREATE VIEW 학과평균나이 AS SELECT 소속학과, AVG(나이) AS 평균나이 FROM 학생 GROP BY 소속학과;SELECT * FROM 학과평균나이; ‘학과평균나이’ 뷰를 사용하여 소속학과는 가정학과, 평균나이는 27.189인 새로운 정보를 입력하하시오123INSERT INTO 학과평균나이 VALUES(&apos;가정학과&apos;,27.189); //에러!! 컬럼의 제약이 있는 뷰나 GROUP BY연산 또는 JOIN연산을 사용한 뷰에는 레코드삽입이 어렵다.// 평균나이는 나이를 모두더한후 인원수만큼 나눈것인데 이와같은 형태는 이상하지 않은가?? 이런건 안된다. 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"부속질의","slug":"부속질의","permalink":"http://OneNineIx.github.io/tags/부속질의/"},{"name":"뷰","slug":"뷰","permalink":"http://OneNineIx.github.io/tags/뷰/"}]},{"title":"데이터의 검색(그룹,조인,집합연산)","slug":"database-chqp9","date":"2018-09-16T16:10:46.000Z","updated":"2018-09-16T20:01:18.752Z","comments":true,"path":"2018/09/17/database-chqp9/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/database-chqp9/","excerpt":"","text":"목차 1. 그룹질의의 개념2. 그룹함수 질의의 개념3. HAVING 절4. 집합 연산5. 조인 질의의 개념6. 외부조인의 개념예제목록 그룹질의의 개념 주어진 조건에 따라 레코드를 그룹화 하고 여러 통게적인 연산을 수행하는 질의 GROUP BY 절을 사용하여 그룹의 조건을 기술하고, HAVING절에 그룹에 대한 검색 조건을 기술구문형식 1234SELECT * | 컬럼1,컬럼2....컬럼n| 그룹함수 FROM 테이블_이름 GROUP BY 컬럼1,컬럼2,.... [HAVING 그룹조건] 단순 그룹질의 가장 단순화된 형식의 그룹질의 지정된 컬럼을 기준으로 동일한 컬럼값을 갖는 레코드를 그룹으로 묶어 검색하는 질의구문형식 123SELECT 컬럼1,컬럼2,... FROM 테이블_이름 GROUP BY 컬럼1,컬럼2,.... 12345학생 테이블에서 소속학과를 기준으로 그룹화하여 소속학과를 출력하시오SELECT 소속학과 FROM 학생 GROUP BY 소속학과 소속학과를 기준으로 GROUP BY 하였기 때문에 다음과 같이 소속학과 별로 5개의 그룹으로 정렬되어 나타난다. 그룹함수 질의의 개념 그룹 기준에 따라 묶인 레코드에 그룹 함수를 적용하여 다양한 결과를 생성하는 질의 단, GROUP BY 절이 없을 경우 전체테이블을 한개의 그룹으로 간주 종류 사용 예 의미 AVG() AVG(X) 컬럼 X의 평균값을 반환 COUNT() COUNT(*) 그룹의 레코드의 개수를 반환 MAX MAX(X) 컬럼 X의 최대값을 반환 MIN MIN(X) 컬럼 X의 최소값을 반환 SUM() SUM(X) 컬럼 X의 총합을 반환 그룹함수 질의의 사용 강의의 이수구분별 이수구분과 과목 수를 출력하시오 12SELECT 이수구분, COUNT(*) FROM 강의GROUP BY 이수구분 이수구분을 기준으로 3개의 그룹이 지어졌다 그리고 3개의 그룹에서 각각 과목수COUNT(* )함수가 사용되서3줄의 레코드가 결과값으로 반환된다. HAVING 절 GROUP BY 절에 의해 묶인 레코드 그룹에 특정 조건을 만족하는 그룹만을 검색할 때 사용 SELECT 문을 통해 검생 수행 시 레코드에 대한 조건을 WHERE절에 기술 조인에 필요한 조건은 ON절에 기술 레코드 그룹에 대한 조건은 HAVING절에 기술 HAVING 절의 사용 123456강의의 이수구분 별 개설된 강의의 수가 3개이상인 이수구분에 대하여 이수구분과 강의의 개수를 출력하시오SELECT 이수구분, COUNT(*) FROM 강의 GRUOP BY 이수구분 HAVING COUNT(*) &gt;= 3 집합 연산 두 개 이상의 SELECT문 결과에 집합 연산자에 적용하여 질의 결과를 결합하는 질의 SELELCT문의 결과 스키마가 동일한 경우에 적용 가능 집합 연산의 종류 합집합 - UNION 교집합 - INTERSECT (IN 또는 EXISTS로 대체) 차집합 - EXCEPT (외부 조인으로 대체) MySQL은 UNION 절만 제공 UNION과 UNION ALL 절 두 개 이상의 독립적인 SELECT 문의 결과를 합집합의 형태로 나타내는 질의 UNION ALL은 중복을 허용 123456구문 형식SELECT 컬럼1, 컬럼2, ...,컬럼n FROM 테이블1 // 주의사항: 결과 스키마가 같도록 해야함UNIONSELECT 컬럼1, 컬럼2, ...,컬럼n FROM 테이블2[UNION...] 조인 질의의 개념 테이블 간의 관련성을 이용하여 두 개 이상의 테이블을 임시적으로 결합한 후 데이터를 검색하는 질의 기법 ER 모델링 및 정규화 기법으로 여러 테이블로 분리된 정보를 통합하여 검색할 때 사용 조인 질의의 종류 내부조인 외부조인 내부조인의 개념 내부조인(inner join)이란 두 개 이상의 테이블에서 조인 조건을 만족하는 레코드 만 결합 하여 결과에 포함시키는 연산 조인 조건 은 WHERE 절이 아닌 ON 절에 기록 조인 조건에 사용되는 연산자에 따른 구분 동등 조인(equi-join) 비동등 조인(non-equi-join) 동등조인 조인 조건에 동등연산자(=)를 사용하여 조건이 정확하게 일치하는 경우에만 검색결과에 포함시키는 조인 질의 구문 형식 12345SELECT TABLE1.컬럼1, TABLE1.컬럼2, ...,TABLE1.컬럼m, // 테이블이름.컬럼이름 TABLE2.컬럼1, TABLE2.컬럼2, ...,TABLE2.컬럼n // 테이블이름.컬럼이름 SELECT절에서 두 테이블에 존재하는 컬럼을 쭉 가지고 오게되고 FROM T1 INNER JOIN T2 // FROM절에서 두 테이블에서 정보를 가져오는데 그 사이에 INNER JOIN이라고 기입 ON TABLE1.컬럼i = TABLE2.컬럼j // ON절에 JOIN조건을 기술 TABLE1의 컬럼i와 TABLE2의 컬럼j와 값이 같은 것끼리만 레코드를 결합하라 는 의미 [WHERE 조건] 사용 예 123456강의의 강의이름, 강의실, 강의시간을 출력하고 그 강의를 담당하는 교수의 교수이름, 소속학과, 전화번호를 출력하시오SELECT 강의.강의이름, 강의.강의실, 강의.강의시간, 교수.교수이름,교수.소속학과,교수.전화번호 FROM 강의 INNER JOIN 교수 ON 강의.교수번호 = 교수.교수번호 // 교수가 어떤 강의를 하면 교수의 교수번호가 강의에 있는 교수번호에 외래키로 참조가 된다. 강의의 이름은 강의테이블에 있고 교수의 이름은 교수테이블에 있다 이러한 상황에 동등조인을 사용한다. 비동등조인 조인 조건에 동등연산자가 아닌 비교연산자나 특수연산자를 사용하여 조인하는 질의 1234567구문형식SELECT T1.컬럼1,T1.컬럼2, ..., T1.컬럼m, T2.컬럼2,T2.컬럼2, ..., T2.컬럼n FROM T1 INNER JOIN | CROSS JOIN T2 ON T1.컬럼 i 비교연산자|특수연산자 T2.컬럼j [WHERE 조건] 외부조인의 개념 내부조인(inner join)은 조인조건에 일치하는 레코드만 결합하여 결과를 생성 정보의 손실이 발생 외부조인(outer join)은 조인조건에 맞지 않는 레코드도 질의의 결과에 포함시키는 질의 외부조인의 종류 왼쪽 외부조인(left outer join) 오른쪽 외부조인(right outer join) 완전 외부조인(full outer join) MySQL은 왼쪽, 오른쪽 외부조인만 지원 완전 외부조인은 양쪽 외부조인을 UNION(합집합)하면된다. 외부조인의 형식조인 조건과 관계없이 모든 레코드가 포함되는 기준이 되는 테이블의 위치에 따라 왼쪽 또는 오른쪽 외부조인으로 구분 12345678구문 형식SELECT 별칭1.컬럼1, 별칭1.컬럼2,...,별칭1.컬럼n, 별칭2.컬럼2,별칭2.컬럼2,...,별칭2.컬럼m FROM 테이블1 AS 별칭1 LEFT|RIGHT [OUTER] JOIN 테이블2 AS 별칭2 ON 별칭1.컬럼i = 별칭2.컬럼j [WHERE절] 외부조인의 사용 12345학생의 모든 정보 출력하고 수강신청을 한 학생에 대해서는 수강신청 정보를 같이 출력하시오.SELECT 학생.*, 수강신청.* FROM 학생 LEFT OUTER JOIN 수강신청 ON 학생.학생번호 = 수강신청.학생번호 // 학생이 수강신청을 하게되면 수강신청쪽에 학생번호가 참조가 되서 외래키로 남는다 외부조인후 조회되지 않는 레코드 값은 NULL로 대체되어 출력된다. 예제활용강의 테이블에서 이수구분과 이수구분별 과목 수를 출력하시오123SELECT 이수구분, COUNT(*) FROM 강의 GROUP BY 이수구분 교수 테이블에서 현재 재직 중인 교수의 수를 교수수라는 이름으로 출력하시오123SELECT COUNT(*) AS 교수수 FROM 교수 WHERE 퇴사일 IS NULL 학생 테이블에서 소속학과와 각 소속학과별 최고령자와 최소연소자의 나이를 출력하시오123SELECT 소속학과, MAX(나이) AS 최고령사, MIN(나이) AS 최연소자 FROM 학생 GROUP BY 소속학과 학생 테이블에서 소속학과와 각 소속학과별 학생의 평균 나이를 출력하시오123SELECT 소속학과, AVG(나이) AS 평균나이 FROM 학생 GROUP BY 소속학과 학생테이블에서 소속학과별로 그룹화하고 각 소속학과 내부에서 성별에 따라서 학생수, 소속학과, 성별을 출력하시오123SELECT COUNT(*) AS 학생수, 소속학과, 성별 FROM 학생 GROUP BY 소속학과, 성별 학생 테이블에서 소속학과가 컴퓨터과학과인 학생목록과 학생 테이블에서 나이가 25세 이상인 학생의 학생목록을 학생번호, 학생이름, 소속학과 컬럼을 통합하여 출력하시오123456789SELECT 학생번호,학생이름,소속학과 FROM 학생 WHERE 소속학과 = &apos;컴퓨터과학과&apos;UNION ALL // ALL은 중복을 허용한다는 의미 컴퓨터과학과이면서 25세 이상인 사람을 포함하여 보여줌SELECT 학생번호, 학생이름, 소속학과 FROM 학생 WHERE 나이 &gt;= 25 강의와 교수 테이블을 사용하여 강의이름, 강의실, 강의시간,이수구분, 그리고 강의를 담당하는 교수의 교수이름, 소속학과, 전화번호를 출력하시오1234SELECT 강의.강의이름, 강의.강의실, 강의.강의시간, 강의.이수구분, 교수.교수이름, 교수.소속학과, 교수.전화번호 FROM 강의 INNER JOIN 교수 ON 강의.교수번호 = 교수.교수번호 학생의 수강신청 테이블을 사용하여 강의번호 ‘LA01’을 수강신청한 학생의 학생이름, 소속학과, 전화번호 그리고 신청시각을 출력하시오1234SELECT 학생.학생이름, 학생.소속학과, 학생.전화번호, 수강신청.신청시각 FROM 학생 INNER JOIN 수강신청 ON 학생.학생번호 = 수강신청.학생_학생번호 // ON에 조인조건을 기술하고 WHERE 수강신청.강의_강의번호 = &apos;LA01&apos; // WHERE절에 레코드 조건을 기술 강의와 교수 테이블을 사용하여 강의의 강의번호, 강의이름, 이수구분, 그리고 강의를 담당하는 교수의 교수이름과 직위를 출력하시오12345조인절을 편하게 사용하는 방법 AS로 별칭선언SELECT A.강의번호, A.강의이름, A.이수구분, B.교수이름, B.직위 FROM 강의 AS A INNER JOIN 교수 AS B ON A.교수번호 = B.교수번호 학생과 수강신청 테이블에서 모든 학생정보와 각 학생이 수강신청을 한 수강신청 정보를 출력하시오(OUTER JOIN)12345//수강신청하지 않은 학생도 있다. 그렇다면 OUTER JOINSELECT 학생.*, 수강신청.* FROM 학생 LEFT OUTER JOIN 수강신청 // OUTER JOIN을 함으로써 수강신청하지 않은 학생정보가 누락되지 않는다. ON 학생.학생번호 = 수강신청.학생_학생번호; 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"HAVING","slug":"HAVING","permalink":"http://OneNineIx.github.io/tags/HAVING/"},{"name":"그룹질의","slug":"그룹질의","permalink":"http://OneNineIx.github.io/tags/그룹질의/"},{"name":"그룹함수","slug":"그룹함수","permalink":"http://OneNineIx.github.io/tags/그룹함수/"},{"name":"집합연산","slug":"집합연산","permalink":"http://OneNineIx.github.io/tags/집합연산/"},{"name":"조인질의","slug":"조인질의","permalink":"http://OneNineIx.github.io/tags/조인질의/"},{"name":"외부조인","slug":"외부조인","permalink":"http://OneNineIx.github.io/tags/외부조인/"}]},{"title":"EER 다이어그램","slug":"database-chap8","date":"2018-09-16T16:00:45.000Z","updated":"2018-09-16T20:01:16.907Z","comments":true,"path":"2018/09/17/database-chap8/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/database-chap8/","excerpt":"","text":"MySQL 워크벤치의 EER 다이어그램 관게설정에서 부모 테이블의 기본키가 자식 테이블의 기본키로 전이되는 관계를 식별관계 라고 한다. 테이블간 관계가 만들어지면 반드시 외래키가 만들어지는데외래키가 그 테이블의 기본키인지 아닌지에 따라 기본키면 식별관계, 외래키가 일반속성컬럼이면 비식별관계 로 나뉘어진다 FORWARD ENGINEER EER 다이어그램 결과로 실제 데이터를 집어넣을 수 있는 스키마로 자동으로 변환해 생성할 때 사용하는 기능 FORWARD ENGINEER 기능은 고차원 추상화와 논리, 또는 구현 독립적 설계를 시스템의 물리적 구현으로 변환하는 프로세스 NULL을 허용하면 동그라미가 생긴다 식별관계는 실선, 비식별관계는 점선으로 표시된다. 1:다 관계이다 저 점선이 테이블에 가리키는 곳을 보면 -은 1대관계를 표시, 까마귀발은 다의 관계를 표시한다. 자기자신을 가리키는 재귀적 관계이다. 재귀적 관계는 반드시 NULL을 허용해야 하며, 비식별관계를 가져야한다. 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"EER 다이어그램","slug":"EER-다이어그램","permalink":"http://OneNineIx.github.io/tags/EER-다이어그램/"}]},{"title":"데이터베이스의 함수","slug":"DATABASE-CHAP7-1","date":"2018-09-16T15:34:20.000Z","updated":"2018-09-16T20:01:19.085Z","comments":true,"path":"2018/09/17/DATABASE-CHAP7-1/","link":"","permalink":"http://OneNineIx.github.io/2018/09/17/DATABASE-CHAP7-1/","excerpt":"","text":"목차 1. 문자함수2. 숫자함수3. 날짜함수4. 형변환함수 특정 목적을 수행하도록 사전에 정의된 연산 및 기능을 입력값을 사용하여 수행한 후 결과값을 반환하는 명령어 집합의 단위 MySQL은 검색결과가 사용자에게 여러 형태로 사용되도록 여러 데이터 타입에 대한 다양한 함수를 제공 문자함수 숫자함수 날짜 및 시간함수 형 변환 함수 문자함수 123교수 테이블에서 교수이름, 교수번호, 주소의 도시이름을 출력하시오SELECT 교수이름, 교수번호, SUBSTRING(주소,1,2) AS 도시이름 FROM 교수 1234학생 테이블에서 학생의 이름이 4글자 이상인 학생의 학생이름, 학생번호, 주소를 출력하시오SELECT 학생이름, 학생번호, 주소 FROM 학생 WHERE CHAR_LENGTH(학생이름) &gt;=4; 숫자함수 123-153의 절댓값과 랜덤수 1개를 출력하시오SELECT ABS(-153), RAND() 참조하는 테이블같은게 없으므로 이게 끝 12345강의 테이블에서 이수구분이 &apos;전공필수&apos;인 강의의 강의이름, 이수구분, 강의시간,그리고 인원제한에 15%를 증가시킨 값을 1의 자리에서 버림한 값을 출력하시오SELECT 강의이름, 이수구분, 강의시간, 인원제한, TRUNCATE(인원제한 * 1.15, -1) AS 인원제한증가 FROM 강의 WHERE 이수구분 = &apos;전공필수&apos;; 날짜함수 1SELECT NOW() 현재날짜와 시간을 출력 123현재 날짜와 현재 시간에서 1일 2시간 10분 후의 시간을 출력하시오SELECT NOW(), ADDDATE(NOW(),INTERVAL &apos;1 2:10&apos; DAY_MINUTE) //현재 시각에서 하루+두시간 10분의 시간을 더해줘라 1234567수강신청 테이블에서 신청시각이 2014년 2월 26일보다 1일 후에 신청된 수강신청 정보를 출력하시오SELECT * FROM 수강신청 WHERE 신청시각 &gt; ADDTIME (&apos;2014-02-26. 00:00:00&apos;,&apos;24:00:00&apos;); // 날짜를 더하는 함수SELECT * FROM 수강신청 WHERE SUBDATE(신청시각, 1) &gt; &apos;2014-02-26 00:00:00&apos;; //날짜를 빼는함수 형 변환함수 검색 결과 출력 또는 다른데이터 타입과의 연산을 위해 데이터 타입 등을 변환하는 함수 CONVERT - CONVERT(X,타입) : X를 지정된 타입으로 변환한 값을 반환 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"형변환함수","slug":"형변환함수","permalink":"http://OneNineIx.github.io/tags/형변환함수/"},{"name":"날짜함수","slug":"날짜함수","permalink":"http://OneNineIx.github.io/tags/날짜함수/"},{"name":"숫자함수","slug":"숫자함수","permalink":"http://OneNineIx.github.io/tags/숫자함수/"},{"name":"문자함수","slug":"문자함수","permalink":"http://OneNineIx.github.io/tags/문자함수/"}]},{"title":"질의문과 연산자","slug":"database-chap7","date":"2018-09-16T12:12:23.000Z","updated":"2018-09-16T20:01:19.501Z","comments":true,"path":"2018/09/16/database-chap7/","link":"","permalink":"http://OneNineIx.github.io/2018/09/16/database-chap7/","excerpt":"","text":"목차 1. 단순질의문의 개념2. 데이터 정렬(ORDER BY)3. 중복데이터 제거(DISTINCT)4. 상위 n개 데이터 검색(LIMIT)5. 조건질의문의 개념(WHERE)6. 산술연산자(-,%,+,/,..)7. 비교연산자(=,&lt;,&lt;=,&gt;,&gt;=,!=)8. 논리연산자(&amp;&amp;,or,!)9.특수연산자(BETWEEN,LIKE,IN,IS NULL) 단순질의문의 개념 레코드를 제한하지 않고 전체 테이블을 검색하는 SELECT 문으로 WHERE 절이 없는 질의문 구문형식112SELECT 컬럼이름1, 컬럼이름2 FROM 테이블이름 구문형식21SELECT * FROM 테이블이름 데이터 정렬(ORDER BY) ORDER BY 절을 사용 검색 결과를 특정 컬럼에 대해 오름차순 또는 내림차순으로 정렬 123학생 테이블에서 학년 컬럼값을 기준으로 오름차순으로 정렬하여 학생이름, 학생번호 , 주소를 검색하여 출력하시오SELECT 학생이름, 학생번호, 주소, 학년 FROM 학생 order by 학년 ASC 구문형식12SELECT 문 형식 ORDER BY 컬럼이름 [ASC | DESC],컬럼이름...[ASC | DESC] ASC(오름차순이 디폴트로 기술하지 않으면 오름차순으로 정렬) 여러개의 컬럼이름으로 정렬시 첫번째 정렬된것의 기준으로 다음것이 정렬된다 중복데이터 제거(DISTINCT) SELECT 절에 DISTINCT 키워드를 적용하여 검색 결과에 중복되는 레코드를 제거 컬럼 값이 아닌 레코드 단위의 중복을 제거\\ 구문형식12SELECT DISTINCT * |컬럼이름1, ... ,컬럼이름n FROM 테이블이름 컬럼이 여러개인경우 여러개 컬럼의 값 전체가 중복되는 것을 배제 즉 앞의 컬럼의 값이 같다고 하더라도 뒤의 컬럼값이 다르다면 중복배제되지 않는다 123수강신청테이블에서 수강신청된 과목의 강의번호를 한번씩만 출력하시오SELECT DISTINCT 강의_강의번호 FROM 수강신청; 상위 n개 데이터 검색(LIMIT) SELECT 문에 LIMIT 키워드를 적용하여 검색 결과에 포함되는 레코드의 개수를 제한 가능 12345구문형식SELECT * |컬럼이름1, ... ,컬럼이름n FROM 테이블이름 ... LIMIT n 123456학생 테이블에서 학생의 나이가 적은 세 학생의 학생번호, 학생이름, 나이, 소속학과를 출력하시오SELECT 학생번호, 학생이름, 나이, 소속학과 FROM 학생 ORDER BY 나이 LIMIT 3; 조건질의문의 개념(WHERE) 산술연산식, 함수 등을 사용하여 표현한 조건을 WHERE 절에 기술하여 조건을 만족하는 레코드만 검색하는 SELECT문 산술연산자 비교연산자 논리연산자 특수연산자 WHERE 절은 UPDATE, DELETE 문에서도 동일하게 적용 산술연산자(-,%,+,/,..) SELECT 절 또는 WHERE 절에 사용되어 컬럼값 또는 상수와의 산술계산을 위한 연산자 DIV(정수나눗셈), /(나눗셈연산자),-,%,+,* 123강의 테이블에서 강의이름, 강의실과 인원제한을 10% 확대한 확대인원제한 컬럼명으로 출력하시오SELECT 강의이름, 강의실, 인원제한, 인원제한 *1.1 AS 확대인원제한 FROM 강의; AS를 쓰면 확대인원제한 컬럼명으로 바뀌게된다.(UPDATE되는 것이 아니다.) 비교연산자(=,&lt;,&lt;=,&gt;,&gt;=,!=) 컬럼값과 상수 또는 컬럼값과 다른 컬럼값과의 크기를 비교하는 연산자 =,&lt;,&lt;=,&gt;,&gt;=,!= 12345강의 테이블에서 강의명이 &apos;데이터베이스&apos;인 강의의 강의이름, 강의시간, 인원제한을 출력하시오.SELECT 강의이름, 강의시간, 인원제한 FROM 강의 WHERE 강의이름 = &apos;데이터베이스&apos;; 12345학생 테이블에서 고학년(3학년 이상) 학생의 학생이름, 학년, 전화번호를 출력하시오SELECT 학생이름, 학년, 전화번호 FROM 학생 WHERE 학년 &gt;= 3 12345수강신청 테이블에서 신청시각이 2014년 3월 2일 오후 6시 이전인 수강신청 정보의 강의번호, 학생번호, 신청시각을 출력하시오SELECT 강의_강의번호, 학생_학생번호, 신청시각 FROM 수강신청 WHERE 신청시각 &lt; &apos;2014-03-02 18:00:00&apos; 논리연산자(&amp;&amp;,||,!) 두 개 이상의 조건이 기술되는 질의문에서 조건식 간에 관계를 정의하는 연산자 &amp;&amp;(두조건모두참), ||(두조건중하나만만족해도참),!(조건이참이아닌) 12345학생 테이블에서 남학생이고 나이가 25세 이상인 학생의 학생번호, 소속학과, 학생이름, 학년을 출력하시오SELECT 학생번호,소속학과,학생이름,학년 FROM 학생 WHERE 성별 =&apos;남&apos; &amp;&amp; 나이 &gt;=25 123456강의 테이블에서 &apos;전공필수&apos;와 &apos;전공선택&apos; 과목의강의이름, 강의실, 강의시간, 인원제한, 이수구분을 출력하시오SELECT 강의이름,강의실,강의시간,인원제한,이수구분 FROM 강의 WHERE 이수구분 = &apos;전공필수&apos; || 이수구분 =&apos;전공선택&apos; 1234567학생 테이블에서 나이가 25~35세인 학생의 학생번호, 학생이름, 주소, 나이, 전화번호를 출력하시오SELECT 학생번호, 학생이름, 주소, 나이, 전화번호 FROM 학생 WHERE 나이 &gt;= 25 &amp;&amp; 나이 &lt;= 35;SELECT 학생번호, 학생이름, 주소, 나이, 전화번호 FROM 학생 WHERE 나이 BETWEEN 25 AND 35 // 같은결과이지만 AND는 &amp;&amp;로 쓸 수 없다. 특수연산자(BETWEEN,LIKE,IN,IS NULL) 12345교수 테이블에서 서울에 거주하는 교수의교수번호, 교수이름, 전화번호, 연구실위치, 직위를 출력하시오SELECT 교수번호, 교수이름, 전화번호, 연구실위치, 직위 FROM 교수 WHERE 주소 LIKE &apos;서울%&apos; 주소에 ‘서울’ 글자가 있는것을 찾는다(부분일치 검색) 웹포털의 검색어 키워드를 이방식으로 사용 1234강의 테이블에서 이수구분이 &apos;교양필수&apos;와 &apos;전공선택&apos;인 강의정보를 출력하시오.SELECT * FROM 강의 WHERE 이수구분 IN (&apos;교양필수&apos;,&apos;전공선택&apos;) 처음으로 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"BETWEEN","slug":"BETWEEN","permalink":"http://OneNineIx.github.io/tags/BETWEEN/"},{"name":"LIKE","slug":"LIKE","permalink":"http://OneNineIx.github.io/tags/LIKE/"},{"name":"IN","slug":"IN","permalink":"http://OneNineIx.github.io/tags/IN/"},{"name":"IS NULL","slug":"IS-NULL","permalink":"http://OneNineIx.github.io/tags/IS-NULL/"},{"name":"특수 연산자","slug":"특수-연산자","permalink":"http://OneNineIx.github.io/tags/특수-연산자/"}]},{"title":"데이터 조작언어의 종류(DML)","slug":"database-chap6","date":"2018-09-16T11:55:11.000Z","updated":"2018-09-16T20:01:18.075Z","comments":true,"path":"2018/09/16/database-chap6/","link":"","permalink":"http://OneNineIx.github.io/2018/09/16/database-chap6/","excerpt":"","text":"데이터 조작 언어(DML) 정의된 테이블에 레코드를 삽입,수정,삭제 및 검색하는데 사용되는 명령어의 집합명령어의 종류1234INSERT - 테이블 스키마에 적합한 레코드를 삽입UPDATE - 테이블에서 조건을 만족하는 특정 레코드의 컬럼값을 수정DELETE - 테이블에 조건을 만족하는 특정 레코드를 삭제SELECT - 조건을 만족하는 레코드를 테이블에서 검색 INSERT문 테이블에 일부 또는 전체 컬럼에 컬럼값을 직접 입력하여 레코드를 삽입하고자 할 때 사용하는 명령문이다. 구문 형식112INSERT INTO 테이블명[(컬럼1,컬럼2,...)]// 컬럼의 일부를 수정할 때에는 컬럼명과 값을 모두 입력해야함 VALUES(값1,값2,...) 123INSERT INTO 교수(교수번호, 소속학과, 교수이름, 직위, 전화번호, 입사일) VALUES(&apos;CO07&apos;, &apos;컴퓨터과학과&apos;,&apos;정민용&apos;,&apos;부교수&apos;,&apos;020-1905-9994&apos;,&apos;2013-05-06&apos;);SELECT * FROM 교수; 구문 형식212INSERT INTO 테이블명 (컬럼생략) // 컬럼의 갯수와 값의 갯수가 똑같을때에 컬럼의 입력을 생략할 수 있다. VALUES(값1, 값2...) 1234INSERT INTO 학생 VALUES( &apos;201483327&apos;,&apos;유아교육과&apos;,&apos;박원장&apos;,1,&apos;남&apos;,25,&apos;020-9972-4412&apos;,&apos;제주시 노형동&apos;);SELECT * FROM 학생; 1234INSERT INTO 졸업예정자 SELECT * FROM 학생 WHERE 학년=4;SELECT * FROM 졸업예정자; UPDATE문 테이블 내에 존재하는 일부 또는 전체 레코드의 컬럼값을 수정할 때 사용하는 명령어 구문형식1123UPDATE 테이블이름 SET 컬럼1=값1 ,컬럼2=값2,... WHERE 조건 // 생략시 테이블에 존재하는 전체 레코드에 대해서 이 컬럼값이 이 값으로 바뀌게 된다 1234SET SQL_SAFE_UPDATES = 0; 저런것을 방지하는 모드를 껐다.UPDATE 강의 SET 인원제한 = 100; WHERE절이 없어서 인원제한 컬럼의 전체 레코드값이 100으로 변경된다. 12345UPDATE 학생 SET 주소 = &apos;서울시 강남구&apos; WHERE 학생번호 = &apos;201434027&apos;;SELECT * FROM 학생 12345UPDATE 강의 SET 강의번호 =&apos;CO20&apos; //강의번호가 FOREIGN KEY이므로 SET할 수 없다. 강의번호를 참조하고 있는 수강신청 테이블이 있기 때문이다. WHERE 강의이름 =&apos;자료구조&apos;SELECT * FROM 강의 구문형식2123UPDATE 테이블이름 SET 컬럼1=수식1,수식2,.... WHERE 조건 구문형식31234UPDATE 테이블이름 SET 컬럼1=(SELECT 컬럼 FROM 테이블이름) // 괄호에 있는 명령문이 먼저 처리가 되고 그 값이 지정된 컬럼에 값이 들어간다. WHERE 조건 DELETE 문 조건에 일치하는 레코드 집합을 테이블에서 삭제할 때 사용하는 명령어 123구문형식DELETE FROM 테이블명 WHERE 조건 1234567졸업예정자 테이블에 있는 모든 레코드를 삭제하시오SET SQL_SAFE_UPDATES=0;DELETE FROM 졸업예정자;SELECT * FROM 졸업예정자; 123456수강신청 테이블에서 신청시각이 2014년 2월 28일 이후인 레코드를 삭제하시오.DELETE FROM 수강신청 WHERE 신청시각 &gt;= &apos;2014-03-01 00:00:00&apos;;SELECT * FROM 수강신청; 12345강의 테이블에서 강의번호가 MN09인 테이블을 삭제하시오DELETE FROM 강의 WHERE 강의번호 = &apos;MN09&apos;; 강의번호가 MN09인 강의를 수강신청 테이블에서 참조하고 있어서 삭제할 수 없다.(참조무결성제약조건)이럴때에는 수강신청정보가 삭제된 이후에 삭제가 가능하다.SELECT * FROM 강의 SAFE UPDATES 모드 MySQL워크벤치의 기능이다. WHERE이 없는 UPDATE/DELETE문은 테이블의 전체 레코드를 변경/삭제 의도하지 않은 데이터 변경/삭제를 방지하기 위해 MySQL 워크벤치는 SAFE UPDATES모드를 지원 기본키가 아닌 컬럼을 대상으로 수정/삭제 조건을 명시할 경우 실행 여부를 결정(WHERE 절이 없는 SELECT 문 포함) SAFE UPDATES 모드 설정 방법1SET SQL_SAFE_UPDATES = 0또는 1 //0은 꺼짐, 1은 켜짐 SELECT문 주어진 조건에 만족하는 레코드를 선택하여 출력하는 SELECT문은 관계 대수의 셀렉션, 프로젝셔느 조인, 카티션 프로덕트 연산자의 기능을 모두 포함하는 명령문 기초적인 SELECT 절과 FROM 절로 기본 SELECT 문을 구성하고 부가적인 목적으로 사용할 수 있는 여러 절을 혼합하여 검색기능을 구체화 구문형식12345678910SELECT [DISTINCT] 컬럼명1, 컬럼명2,... FROM 테이블1 [INNER JOIN | OUTER JOIN 테이블2, INNER JOIN | OUTER JOIN ..., INNER JOIN | OUTER JOIN 테이블m] [ON 조인 조건식] [WHERE 조건식[중첩질의]] [GROUP BY 컬럼명1, 컬럼명2,... [HAVING 조건식]] [ORDER BY 컬럼명1, 컬럼명2,...[ASC|DESC]]; SELECT 절 - 결과에 포함되는 컬럼을 지정 FROM 절 - 질의를 적용할 테이블을 지정 ON/WHERE 절 - 레코드가 만족해야할 절은 WHERE절에 기술하고, 두 개이상의 테이블에서 레코드를 결합시켜서 가지고오는 JOIN연산의 조건을 기술할때 ON절을 사용한다. GROUP BY 절 - 레코드를 그룹화 하기 위한 그룹조건을 지정 (여러개의 레코드를 특정조건에 만족하는 레코드를 그룹지어서 여러가지 통계적인 연산을 할때 사용하는 형태) HAVING 절 - GROUP BY 절이 적용된 결과에 대한 조건을 지정 ORDER BY 절 - 검색 결과의 정렬 기준을 지정 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"INSERT","slug":"INSERT","permalink":"http://OneNineIx.github.io/tags/INSERT/"},{"name":"UPDATE","slug":"UPDATE","permalink":"http://OneNineIx.github.io/tags/UPDATE/"},{"name":"DELETE","slug":"DELETE","permalink":"http://OneNineIx.github.io/tags/DELETE/"},{"name":"ORDER BY","slug":"ORDER-BY","permalink":"http://OneNineIx.github.io/tags/ORDER-BY/"},{"name":"GROUP BY","slug":"GROUP-BY","permalink":"http://OneNineIx.github.io/tags/GROUP-BY/"},{"name":"WHERE","slug":"WHERE","permalink":"http://OneNineIx.github.io/tags/WHERE/"},{"name":"HAVING","slug":"HAVING","permalink":"http://OneNineIx.github.io/tags/HAVING/"},{"name":"명령어","slug":"명령어","permalink":"http://OneNineIx.github.io/tags/명령어/"}]},{"title":"제약조건과 인덱스의 사용목적","slug":"database-chap5","date":"2018-09-16T11:27:21.000Z","updated":"2018-09-16T20:01:17.285Z","comments":true,"path":"2018/09/16/database-chap5/","link":"","permalink":"http://OneNineIx.github.io/2018/09/16/database-chap5/","excerpt":"","text":"제약 조건 테이블과 테이블에 존재하는 데이터를 무결하게 관리하기 위한 목적으로 사용 dbms는 테이블 조작 시 테이블에 정의된 제약조건을 만족시키는지 지속적으로 검사 제약 조건의 종류 PRIMARY KEY : 기본키 지정, UNIQUE와 NOT NULL 특성 FOREIGN KEY : 외래키 지정, 참조 컬럼 정의 NOT NULL : NULL이 될 수 없는 컬럼에 지정 UNIQUE : 동일한 컬럼 값을 가질 수 없음을 지정 AUTO_INCREMENT : 레코드가 추가될 때 자동적으로 속성값이 1부터 1씩 증가되어 입력 일련번호같은 그자체로는 특별한 의미는 없지만 PRIMARY KEY로 사용은 되어야 하는 게시판번호 같은 것에 사용한다 CHECK : 컬럼 값이 특정 조건 준수 여부 지정(MYSQL은 ENUM 데이터타입으로 대체) ENUM타입은 남, 여와 같이 특정 값이 정해져있어 열거되어 있는 데이터의 타입으로 한정된 열거값에서 선택하는 부분에 사용 DEFAULT : 해당 컬럼값에 값이 입력되지 않으며 NULL 대신 기본 값으로 지정된 값이 입력되도록 지정하는 조건 제약 조건의 사용 (개인회원가입)빨간 점은 필수 입력사항이다123456789101112사용 예:CREATE TABLE 개인구매회원(이름 CHAR(10) NOT NULL,ID CHAR(20) PRIMARY KEY,비밀번호 VARCHAR(30) NOT NULL,이메일 VARCHAR(100) NOT NULL,통신사 ENUM(&apos;SKT&apos;,&apos;KT&apos;,&apos;LGT&apos;),휴대폰번호 CHAR(11) NOT NULL,SMS수신 CHAR(1) DEFAULT &apos;N&apos;,이메일수신 CHAR(1) DEFAULT &apos;N&apos;) 인덱스의 사용목적 데이터베이스에 존재하는 많은 양의 데이터를 사용자가 원하는 특정 데이터만을 찾기 위해 (잦은 검색) 유지하는 별도의 자료 구조 데이터베이스의 응답시간을 단축 사용자의 만족도 향상 일반적으로 B+-트리 인덱스 적용 인덱스가 정의되지 않은 컬럼 순차 탐색-많은 시간 소요 자동생성 인덱스 PRIMARY KEY, UNIQUE, FOREIGN KEY의 경우 인덱스번호를 지정하지 않아도 자동으로 지정한다. 클러스터드 인덱스 테이블의 행 자체가 인덱스가 지정하는 특정 컬럼값으로 정렬되어 있는 형태의 인덱스 한 테이블에 한 개만 생성 가능 매우 빠르다 클러스터드 인덱스의 적용 기본키에 자동적으로 적용 기본키가 없는 경우, UNIQUE 제약조건에 해당하는 컬럼에 적용 UNIQUE 제약조건이 없는 경우, 내부적인 숨은 컬럼에 적용 인덱스의 종류 단순 인덱스와 복합 인덱스 단순 인덱스: 단일컬럼에 대해 생성 복합 인덱스: 두개 이상의 컬럼에 대해 생성 UNIQUE인덱스와 NON-UNIQUE 인덱스 UNIQUE : 중복된 값 허용하지 않는 컬럼에 사용, UNIQUE 제약조건을 사용하는 컬럼에 자동 적용 NON-UNIQUE : 중복된 값을 허용하는 컬럼에 사용 인덱스의 확인 - SQL표준문법이 아닌 DBMS자체 유틸에서 제공하는 명령문1SHOW INDEX FROM 테이블이름 FROM 스키마이름; 인덱스 생성1234CREATE INDEX 인덱스이름 ON 테이블이름(컬럼명1,컬럼명2,...)인덱스 삭제DROP INDEX 인덱스이름 ON 테이블이름(속해있는 테이블 이름) 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"제약조건","slug":"제약조건","permalink":"http://OneNineIx.github.io/tags/제약조건/"},{"name":"인덱스","slug":"인덱스","permalink":"http://OneNineIx.github.io/tags/인덱스/"},{"name":"PRIMARY KEY","slug":"PRIMARY-KEY","permalink":"http://OneNineIx.github.io/tags/PRIMARY-KEY/"},{"name":"FOREIGN KEY","slug":"FOREIGN-KEY","permalink":"http://OneNineIx.github.io/tags/FOREIGN-KEY/"},{"name":"INDEX","slug":"INDEX","permalink":"http://OneNineIx.github.io/tags/INDEX/"},{"name":"B+-트리 인덱스","slug":"B-트리-인덱스","permalink":"http://OneNineIx.github.io/tags/B-트리-인덱스/"}]},{"title":"MySQL database forward","slug":"database-forward","date":"2018-09-16T10:51:28.000Z","updated":"2018-09-16T20:01:21.080Z","comments":true,"path":"2018/09/16/database-forward/","link":"","permalink":"http://OneNineIx.github.io/2018/09/16/database-forward/","excerpt":"","text":"Forward Engineer의 이해 S/W공학의 한 분야 소프트웨어 시스템을 개발하기 위하여 분석, 설계, 코딩, 테스트, 유지보수 등의 절차를 단계별로 진행하며 개발하는 공학 기법 고차원 추상화와 논리, 또는 구현 독립적 설계로 시스템의 물리적 구현으로 변환하는 프로세스 일반적으로 소프트웨어 설계 결과를 사용하여 특정 프로그래밍 언어를 사용한 코드를 생성하는 과정을 지칭 [데이터베이스 분야] 요구분석의 결과인 개체, 속성, 관계 등을 기술한 ERD를, 데이터베이스의 물리 특성을 고려하여 데이터베이스에 실질적 저장가능한 스키마로 자동으로 생성하는 프로세스 DDL 스크립트를 생성하여 ERD에 해당하는 데이터베이스 스키마를 생성 MySQL 워크벤치의 지원 기능 스크립트 생성 기능을 이용한 포워드 엔지니어 마법사를 이용한 포워드 엔지니어 추상화되어 있는 설계도를 바탕으로 건축물을 만들어 내는 것 MySQL Models의 UI는 개념, 논리, 물리적 데이터 모델링을 동시에 수행 데이터 모델링 전, 스키마에 대한 설정을 수행 스키마의 이름과 콜레이션을 설정 스키마(Schema)란? 데이터 분야에서 스키마란 데이터의 구조, 즉 데이터를 저장할 수 있는 설계 결과를 의미 MySQL에서 스키마와 데이터베이스는 같은 의미이다. MySQL 워크벤치에서는 Forward Engineer를 이용하여 모델링 결과를 실제 스키마로 변환하여 DBMS에 생성할 수 있는 기능을 제공한다. .png) 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"ER모델링","slug":"ER모델링","permalink":"http://OneNineIx.github.io/tags/ER모델링/"},{"name":"database_forward","slug":"database-forward","permalink":"http://OneNineIx.github.io/tags/database-forward/"}]},{"title":"관계형 데이터베이스 모델링 (Entity - Relationship Model)","slug":"database1","date":"2018-09-14T07:17:55.000Z","updated":"2018-09-16T20:01:17.872Z","comments":true,"path":"2018/09/14/database1/","link":"","permalink":"http://OneNineIx.github.io/2018/09/14/database1/","excerpt":"","text":"ER 모델링 관계형 데이터베이스 모델링 (Entity - Relationship Mdel) 개체(Entity) - 개별적으로 구성될 수 있는 모든것 속성(property) - 각 개체가 가질수 있는 정보들 관계(Relationship) - ER모델에서 관계는 두개이상의 개체사이의 연관성을 의미한다. 개체집합(entity) 다른대상과 분명히 구별되는 독립적인 존재 어떠한 행위(업무)를 하는 행위의 대상이 되는 주체, 객체(ex: 학생,교수,강의) 속성 대상이 되는 주체,객체의 속성 학생(개체집합) 교수 강의 학번(개체집합의 키속성) 교수번호(pk) 강의번호 소속학과(그냥속성) 소속학과 강의이름 학생이름 교수이름 강의실 학년 직위 강의시간 성별 전화번호 인원제한 나이 연구실위치 이수구분 관계(Relationship) 개체가 수행하는 어떠한 행위 개체와 연관된 업무 프로세스 사상( mapping) 식별-비식별 관계 1:1, 1:N, M:N 관계 식별관계 부모 테이블의 기본키가 자식 테이블의 기본키로 전이되는 관계 1:1, 1:N, M:N 관계 표현 비식별관계 부모 테이블의 기본키가 자식 테이블의 일반 속성으로 전이되는 관계 1:1, 1:N 관계 표현 관계정의 한 강의는 오직 한 교무나 할 수 있으며 , 인원제한에 한해 여러명의 학생이 한강의에 수강신청을 할 수 있음 한 교수는 한 학기에 한 개 이상의 강의를 수업함 교수–1..N–(최소 최대표현) 수업 –1..1– 강의 한명의 교수는 하나또는 여러개의 수업에 참여할 수 있고 하나의 강의는 하나의 한명의 교수에 의해서만 수업이 진행된다. 관계정의 한 강의는 오직 한 교수만 할 수 있으며, 인원제한에 한해 여러 명의 학생이 한 강의에 수강신청을 할 수 있음. 한 학생은 여러 강의의 수강신청을 할 수 있음.단 강의인원제한을 초과하면, 선착순 배정함 학생—수강신청—강의 한명의 학생은 여러개의 강의를 , 하나의 강의는 여러명의 학생에게 관계를 가지므로 다대다 관계 어떤것이 개체이고 속성이고 관계이다 하는점을 파악해보는 연습을 해보자. 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원http://cs.knou.ac.kr/~jaehwachung/data3.asp 실습예제 스키마 다운로드","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"},{"name":"ER모델링","slug":"ER모델링","permalink":"http://OneNineIx.github.io/tags/ER모델링/"}]},{"title":"Spring Boot, REST 기반의 JPA 예제를 참조해 이를 스프링 마이바티스로 예제를 변경","slug":"jpa-mybatis","date":"2018-09-05T08:39:12.000Z","updated":"2018-09-05T09:10:14.209Z","comments":true,"path":"2018/09/05/jpa-mybatis/","link":"","permalink":"http://OneNineIx.github.io/2018/09/05/jpa-mybatis/","excerpt":"","text":"Restfulresource의 고유한 URi을 가지고 get put post 등으로 접근하는 방식 JPA쿼리가 담긴 라이브러리 이다.자주 반복적으로 사용되는 쿼리를 메소드에 담아둔 라이브러리로, 메소드를 이용해 쿼리를 사용한다 Springboot Rest기반 JPA예제pom.xml1spring boot devtools : 소스코드 변경시 자동으로 서버를 재접속하는 일을 해준다. application.properties1234567891011121314151617spring.datasource.url=jdbc:mysql://localhost:3306/bootrest?createDatabaseIfNotExist=truespring.datasource.username=rootspring.datasource.password=1234spring.datasource.tomcat.max-wait=20000spring.datasource.tomcat.max-active=50spring.datasource.tomcat.max-idle=20spring.datasource.tomcat.min-idle=15spring.datasource.hikari.connection-test-query=SELECT 1​spring.jpa.hibernate.ddl-auto=create// 모델 클래스를 entity한 테이블을 자동으로 만들어줘라는 설정 update로 해두면 수정된사항만 저장된다.spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect // 테이블 만들때 오류나서 이거해준다spring.jpa.properties.hibernate.id.new_generator_mappings=falsespring.jpa.properties.hibernate.format_sql=true // sql날라가는거 보여주세요​// 디버그 레벨의 로깅설정.logging.level.org.hibernate.SQL=DEBUG logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE 1. 제일먼저 모델클래스 Emp를 만들어준다.1234567891011121314151617181920//엔티티 매핑 어노테이션//설정에 Entity로 해두었기 때문에 달아둔다.기본 생성자는 필수(파라미터가 없는 public 또는 protected 생성자) : 자바는 생성자가 하나도 없으면 기본 생성자를 자동으로 만듬저장할 필드에 final 은 불가능@Table(name=&quot;emp&quot;)//emp라는 이름의 테이블을 자동으로 만들어준다.@Data@AllArgsConstructor@NoArgsConstructorpublic class Emp implements Serializable&#123; private static final long serialVersionUID = 1L; @Id // empno가 키값이 되고 @GeneratedValue(strategy = GenerationType.IDENTITY) // 키값을 자동으로 생성해준다. private Integer empno; private String ename; private Integer sal;​&#125; ​ 2. 메인에서 샘플데이터를 밀어넣어보자123456789101112131415161718192021222324package com.example.rest;​​​@SpringBootApplicationpublic class SpringbootrestApplication implements CommandLineRunner&#123;// Run 메소드를 호출하기 위해서 인터페이스를 구현하고​ @Autowired EmpRepository empRepository; // 레파지토리구현체의 메소드로 데이터를 만들어야 함으로 EmpRepository를 주입해주고​ public static void main(String[] args) &#123;​ SpringApplication.run(SpringbootrestApplication.class, args);//springbootmain이 run메소드를 호출해준다. &#125;​ @Override public void run(String... args) throws Exception&#123; //CommandLineRunner의 run메소드를 만들어두면 empRepository.save(new Emp(1,&quot;홍길동&quot;,9000000)); empRepository.save(new Emp(2,&quot;김봉삼&quot;,3000000)); empRepository.save(new Emp(3,&quot;이진삼&quot;,6000000)); empRepository.save(new Emp(4,&quot;장봉창&quot;,7000000)); empRepository.save(new Emp(5,&quot;둘리&quot;,2000000)); &#125;&#125; 3. Emprepository를 만들자 (쿼리가 담긴다)1234567891011121314151617181920extends JpaRepository를 상속해주어 Jpa메소드들을 사용할수 있게한다.Emprepository extends JpaRepository&lt;Emp, Integer&gt; // 키값을 파라메터로 입력해주고​package com.example.rest.repository;​public interface EmpRepository extends JpaRepository&lt;Emp, Integer&gt;&#123;​ List&lt;Emp&gt; findBySalBetween(int sal1, int sal2); //두 파라메터의 사이에 있는 급여인 사원을 조회하려고 추상화한 메서드// 사원의 목록이니까 List이고 파라메터를 두개받아서 급여가 sal인 사원들의 목록을 Select하는 메소드// 쿼리 메소드, 메소드 이름으로 자동으로 SELECT 쿼리 생성// JPA에서 자동으로 생성하는 쿼리는 다음과 같다.// select// emp0_.empno as empno1_0_,// emp0_.ename as ename2_0_,// emp0_.sal as sal3_0_// from// emp emp0_// where// emp0_.sal between ? and ?&#125; 4. Service를 만들어준다123456789101112131415package com.example.rest.service;​public interface EmpService &#123; // 메소드 이름은 내가 직접 만든것임. 구현할 객체에서 구체적인 쿼리가 담긴다. List&lt;Emp&gt; findAll(); //모든사원 주세요​ Emp findById(int empno); // 사원 id로 하나의 사원 주세요​ void deleteById(int empno); // 사번주시고 삭제해주세요​ Emp save(Emp emp); // 이사원 저장해주세요​ List&lt;Emp&gt; findBySalBetween(int sal1, int sal2); //이거하나만 레파지토리에서 jpa로 만들었다.​ void updateById(int empno, Emp emp); // 이 사원을 (Emp emp)에 던져주는 객체에 수정해주세요&#125; 4. 인터페이스의 구현체를 만든다.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.example.rest.service;​@Service // 구현체니까 Service 애노테이션을 붙여준다public class EmpServiceImpl implements EmpService &#123;​ @Autowired // EmpRepository를 자동주입했다 객체참조를 취득하였다. private EmpRepository empRepository;​ @Override public List&lt;Emp&gt; findAll() &#123; List&lt;Emp&gt; emps = new ArrayList&lt;&gt;(); // ArrayList로 emps를 만들고 empRepository.findAll().forEach(e -&gt; emps.add(e));// 객체참조를 얻은 empRepository의 findAll()메소드를 불러주고// forEach로 돌리면서 컬렉션 emps에 add시켜놓고 return emps;//emps컬렉션을 되돌려준다 &#125;​ @Override public Emp findById(int empno) &#123; Emp emp = empRepository.findById(empno).orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Emp&quot;, &quot;empno&quot;, empno)); // empRepository의 기본제공메소드 직접 만들지는 않았다.//empno(사번)을 던져주고 사원을 조회해주는 메소드 사번 없으면 orElseThrow로 ResourceNotFoundException(직접만든 예외)가 발생한다. return emp;//한명의사원 돌려준다. &#125;​ @Override public void deleteById(int empno) &#123; // 지우고서 행동을 종료하기 때문에 리턴이 없으므로 타입은 void이다 empRepository.deleteById(empno); //JpaRepository의 객체참조를 취득한 empRepository의 delete메소드에 사번을 주고 호출하면 지워진다 &#125;​ @Override public Emp save(Emp emp) &#123; empRepository.save(emp); return emp; &#125;​ @Override public List&lt;Emp&gt; findBySalBetween(int sal1, int sal2) &#123;// 급여가 두 파라미터의 사이에 해당되는 사원의 급여를 조회하는 메서드 List&lt;Emp&gt; emps = empRepository.findBySalBetween(sal1, sal2); System.out.println(emps.size() + &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + sal1 + sal2); if (emps.size() &gt; 0) &#123; // 사이즈가 0보다 크면 되돌려주고 return emps; &#125; else &#123; // 아니면 널을 되돌려준다. return null; &#125; &#125;​ @Override public void updateById(int empno, Emp emp) &#123;// @RequestBody같은것으로 받는다 Emp e = empRepository.findById(empno).orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Emp&quot;, &quot;empno&quot;, empno)); // 먼저 수정할 사원을 사번파라메터로 추출하고 e.setEname(emp.getEname()); //추출한 사원의 이름을 수정하고 e.setSal(emp.getSal()); //추출한 사원의 급여를 수정하고​ empRepository.save(emp); // save를 호출함으로써 데이터베이스에 반영했다. &#125;&#125; 5. HTTP가 404error일때12345678910111213141516171819202122232425262728293031323334package com.example.rest.exception;​import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.http.HttpStatus;​@ResponseStatus(value = HttpStatus.NOT_FOUND) // HTTP가 404error일때 발생되도록public class ResourceNotFoundException extends RuntimeException&#123;​ private String resourceName; // 리소스 이름 private String fieldName; //필드 이름 private Object fieldValue; // 필드 값 public ResourceNotFoundException(String resourceName, String fieldName, Object fieldValue) &#123; super(String.format(&quot;%s not found with %s : %s&quot;, resourceName, fieldName, fieldValue)); // 파라메터 3개받아서 필드변경//&quot;%s not found with %s(몇번사원) : %s(사원ID)&quot; this.resourceName = resourceName; this.fieldName = fieldName; this.fieldValue = fieldValue; &#125;​ public String getResourceName() &#123; return resourceName; &#125;​ public String getFieldName() &#123; return fieldName; &#125;​ public Object getFieldValue() &#123; return fieldValue; &#125;&#125; 6. Controller를 만들자123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.example.rest.controller;​​@RestController //Rest컨트롤러 이므로 레스트컨트롤러로 하고@RequestMapping(&quot;emp&quot;) //http://localhost:8080/emp 로 들어올때 사용하는 어노테이션 생략시 8080만 입력하는게 디폴트public class EmpController &#123; @Autowired // 서비스 구현체를 주입했다. private EmpService empService;​​ @GetMapping(produces = &#123; MediaType.APPLICATION_JSON_VALUE &#125;) // JSON이니까 Media타입이라고? 썼다. 모든사원 조회, GET, Localhost:8080/emp public ResponseEntity&lt;List&lt;Emp&gt;&gt; getAllEmps() &#123; //ResponseEntity는 Rest니까 주는 타입?인거같고 여러명을 조회하는것이라 &lt;List&lt;Emp&gt;&gt;로 주었다. 한명의사원이라면 Emp만 List&lt;Emp&gt; emps = empService.findAll(); emps에 findAll()메소드로 모든사원을 조회해 담아주고 return new ResponseEntity&lt;List&lt;Emp&gt;&gt;(emps, HttpStatus.OK); // 이렇게 돌려준다 &#125;​//포스트맨으로 테스트하자 @GetMapping(value = &quot;/&#123;empno&#125;&quot;, produces = &#123; MediaType.APPLICATION_JSON_VALUE &#125;)//empno로 한명의사원 조회, GET, Localhost:8080/emp/(empno사번) public ResponseEntity&lt;Emp&gt; getEmp(@PathVariable(&quot;empno&quot;) int empno) &#123;//URL경로에 들어온값을 파라메터로 받아내려면@PathVariable(&quot;empno&quot;), (value = &quot;/&#123;empno&#125;&quot;를 받아서 int empno return new ResponseEntity&lt;Emp&gt;(empService.findById(empno), HttpStatus.OK); // ResponseEntity&lt;Emp&gt;에 담아서 리턴 &#125;​// empno로 사원삭제 @DeleteMapping(value = &quot;/&#123;empno&#125;&quot;, produces = &#123; MediaType.APPLICATION_JSON_VALUE &#125;) //@DeleteMapping : HTTP요청 메소드만 다르다.(rest방식) public ResponseEntity&lt;Void&gt; deleteEmp(@PathVariable(&quot;empno&quot;) int empno) &#123; empService.deleteById(empno); return new ResponseEntity&lt;Void&gt;(HttpStatus.OK); &#125;​​// empno로 사원 수정(empno로 사원 찾아 인자로 넘어오는 Emp 객체의 ename, sal로 수정함) @PutMapping(value = &quot;/&#123;empno&#125;&quot;, produces = &#123; MediaType.APPLICATION_JSON_VALUE &#125;)// PUT, Localhost:8080/emp/(empno사번) public ResponseEntity&lt;Emp&gt; updateEmp(@PathVariable(&quot;empno&quot;) int empno, //수정할 대상이 되는 target파라메터@RequestBody Emp emp) &#123; // @RequestBody로 들어온사원객체 이런거 던져주는 테스트할려고 포스트맨씀 empService.updateById(empno, emp); // 수정해주고 return new ResponseEntity&lt;Emp&gt;(emp, HttpStatus.OK); //수정한 emp를 인자로 받아 ResponseEntity&lt;Emp&gt;에 담아 던져줬다. &#125;​//사원입력 @PostMapping// 한명의 사원을 입력하는 컨트롤러 메소드 public ResponseEntity&lt;Emp&gt; save(@RequestBody Emp emp) &#123;//@RequestBody으로 들어오는 Emp객체로 자동으로 바인딩해서 받아내고(empno,ename) return new ResponseEntity&lt;Emp&gt;(empService.save(emp), HttpStatus.OK); //저장 &#125;​​//급여를 기준으로 사원 검색 (sal&gt;sal1 and sal&lt;sal2) @GetMapping(value = &quot;/&#123;sal1&#125;/&#123;sal2&#125;&quot;)// &quot;/&#123;sal1&#125;/&#123;sal2&#125;&quot;형태로 요청 http://Localhost:8080/emp/0(급여sal1)/8000000(급여sal2) : 급여가 0에서 800만사이인 사원 조회 public ResponseEntity&lt;List&lt;Emp&gt;&gt; getEmpBySalBetween(@PathVariable int sal1, // URL경로에 대한 값@PathVariable int sal2) &#123; // URL경로에 대한 값 List&lt;Emp&gt; emps = empService.findBySalBetween(sal1, sal2); return new ResponseEntity&lt;List&lt;Emp&gt;&gt;(emps, HttpStatus.OK); &#125;&#125; 마이바티스로 변경1234567891011121314151617181920212223242526272829303132package com.example.mybatis;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.CommandLineRunner;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import com.example.mybatis.model.Emp;import com.example.mybatis.repository.EmpRepository;@SpringBootApplicationpublic class SpringbootjpachangemybatisApplication implements CommandLineRunner&#123; @Autowired EmpRepository empRepository; public static void main(String[] args) &#123; SpringApplication.run(SpringbootjpachangemybatisApplication.class, args); &#125; @Override public void run(String... args) throws Exception &#123; empRepository.save(new Emp(1,&quot;홍길동&quot;,9000000)); empRepository.save(new Emp(2,&quot;김봉삼&quot;,3000000)); empRepository.save(new Emp(3,&quot;김갑수&quot;,6000000)); empRepository.save(new Emp(4,&quot;조춘현&quot;,7000000)); empRepository.save(new Emp(5,&quot;둘리&quot;,2000000)); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940package com.example.mybatis.Controller;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import com.example.mybatis.model.Emp;import com.example.mybatis.repository.EmpRepository;@Controllerpublic class EmpController &#123; @Autowired EmpRepository empRepository; @RequestMapping(value=&quot;/emps&quot;, method=RequestMethod.GET, params=&quot;json&quot;) @ResponseBody public Object userJson() &#123; System.out.println(&quot;조건3개 ?json empsJson호출&quot;); List&lt;Emp&gt; emps = empRepository.findAll(); return emps; &#125; @RequestMapping(value=&quot;/emps&quot;, method=RequestMethod.GET) public Object userHome(Model model) &#123; System.out.println(&quot;조건2개 userJson호출&quot;); List&lt;Emp&gt; emps = empRepository.findAll(); model.addAttribute(&quot;emps&quot;, emps ); System.out.println(&quot;조건2개 userJson호출&quot;); return &quot;Emp_list&quot;; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839package com.example.mybatis.mapper;import java.util.List;import org.apache.ibatis.annotations.Delete;import org.apache.ibatis.annotations.Insert;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import org.apache.ibatis.annotations.Result;import org.apache.ibatis.annotations.ResultType;import org.apache.ibatis.annotations.Results;import org.apache.ibatis.annotations.Select;import org.apache.ibatis.annotations.Update;import com.example.mybatis.model.Emp;@Mapperpublic interface EmpMapper &#123; @Select(&quot;SELECT * FROM emp ORDER BY empno ASC&quot;) @ResultType(Emp.class) public List&lt;Emp&gt; findAll(); @Select(&quot;SELECT * FROM emp WHERE empno = #&#123;empno&#125;&quot;) @Results(id = &quot;empResultMap&quot;, value = &#123; @Result(property = &quot;empno&quot;, column = &quot;empno&quot;), @Result(property = &quot;ename&quot;, column = &quot;ename&quot;), @Result(property = &quot;sal&quot;, column = &quot;sal&quot;) &#125;) public Emp findById(int empno); @Delete(&quot;DELETE FROM emp WHERE empno = #&#123;empno&#125;&quot;) public void deleteById(int empno); @Insert(&quot;INSERT into emp(empno,ename,sal) VALUES(#&#123;empno&#125;, #&#123;ename&#125;,#&#123;sal&#125;)&quot;) public void save(Emp emp); @Select(&quot;SELECT * FROM emp WHERE sal &gt; #&#123;sal1&#125; and sal &lt; #&#123;sal2&#125;&quot;) public List&lt;Emp&gt; findBySalBetween(@Param(&quot;sal1&quot;) int sal1, @Param(&quot;sal2&quot;) int sal2); @Update(&quot;UPDATE emp SET ename = #&#123;emp.ename&#125;, sal=#&#123;emp.sal&#125; WHERE empno = #&#123;eno&#125;&quot;) public void updateById(@Param(&quot;eno&quot;) int empno, @Param(&quot;emp&quot;) Emp emp);&#125; 123456789101112131415161718192021222324252627282930package com.example.mybatis.model;import java.io.Serializable;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Entity@Table(name = &quot;emp&quot;)@Data@AllArgsConstructor@NoArgsConstructorpublic class Emp implements Serializable &#123; private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer empno; private String ename; private Integer sal;&#125; 123456789101112131415161718192021222324252627282930313233343536package com.example.mybatis.repository;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import com.example.mybatis.mapper.EmpMapper;import com.example.mybatis.model.Emp;@Repositorypublic class EmpRepository &#123; @Autowired EmpMapper mapper; public List&lt;Emp&gt; findAll()&#123; return mapper.findAll(); &#125; public Emp findById(int empno) &#123; return mapper.findById(empno); &#125; public void deleteById(int empno)&#123; mapper.deleteById(empno); &#125; public void save(Emp emp) &#123; mapper.save(emp); &#125; public List&lt;Emp&gt; findBySalBetween(int sal1, int sal2)&#123; return mapper.findBySalBetween(sal1, sal2); &#125; public void updateById(int empno, Emp emp) &#123; mapper.updateById(empno, emp); &#125;&#125; application.properties1234567891011121314151617181920212223242526272829spring.datasource.url=jdbc:mysql://localhost:3306/bootrest?createDatabaseIfNotExist=truespring.datasource.username=rootspring.datasource.password=1234spring.datasource.tomcat.max-wait=20000spring.datasource.tomcat.max-active=50spring.datasource.tomcat.max-idle=20spring.datasource.tomcat.min-idle=15spring.datasource.initialization-mode=neverspring.jpa.hibernate.ddl-auto=createspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialectspring.jpa.properties.hibernate.id.new_generator_mappings=falsespring.jpa.properties.hibernate.format_sql=truemybatis.configuration.map-underscore-to-camel-case=truemybatis.configuration.default-fetch-size=100mybatis.configuration.default-statement-timeout=30logging.level.org.hibernate.SQL=DEBUGlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACEspring.mvc.view.prefix=/WEB-INF/views/spring.mvc.view.suffix=.jsplogging.config=classpath:logback-spring.xml spring.http.encoding.charset=UTF-8spring.http.encoding.enabled=truespring.http.encoding.force=true jsp1234567891011121314151617181920212223242526272829303132&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=EUC-KR&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class=&quot;col-xs-1 col-sm-1 col-md-1 col-lg-1&quot;&gt;No&lt;/th&gt; &lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-lg-2&quot;&gt;Writer&lt;/th&gt; &lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-lg-2&quot;&gt;Sal&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=&quot;#&#123;emps &#125;&quot; var=&quot;b&quot;&gt; &lt;tr&gt; &lt;td&gt;$&#123;b.empno &#125;&lt;/td&gt; &lt;td&gt;$&#123;b.ename &#125;&lt;/td&gt; &lt;td&gt;$&#123;b.sal &#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;springbootjpachangemybatis&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.3.RELEASE&lt;/version&gt; &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-dbcp&lt;/groupId&gt; &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;11.2.0.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt; &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.bgee.log4jdbc-log4j2&lt;/groupId&gt; &lt;artifactId&gt;log4jdbc-log4j2-jdbc4.1&lt;/artifactId&gt; &lt;version&gt;1.16&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.bgee.log4jdbc-log4j2&lt;/groupId&gt; &lt;artifactId&gt;log4jdbc-log4j2-jdbc4.1&lt;/artifactId&gt; &lt;version&gt;1.16&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;codelds&lt;/id&gt; &lt;url&gt;https://code.lds.org/nexus/content/groups/main-repo&lt;/url&gt;; &lt;/repository&gt; &lt;/repositories&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"mybatis","slug":"programing/mybatis","permalink":"http://OneNineIx.github.io/categories/programing/mybatis/"}],"tags":[{"name":"jpa","slug":"jpa","permalink":"http://OneNineIx.github.io/tags/jpa/"},{"name":"mybatis","slug":"mybatis","permalink":"http://OneNineIx.github.io/tags/mybatis/"},{"name":"spring","slug":"spring","permalink":"http://OneNineIx.github.io/tags/spring/"},{"name":"java","slug":"java","permalink":"http://OneNineIx.github.io/tags/java/"}]},{"title":"자바스크립트로 별 찍기(다중 for문)","slug":"Star","date":"2018-09-05T06:56:51.000Z","updated":"2018-09-16T09:44:56.347Z","comments":true,"path":"2018/09/05/Star/","link":"","permalink":"http://OneNineIx.github.io/2018/09/05/Star/","excerpt":"","text":"언어를 익히면서 for문을 배울때 보통 같이 하게되는 예제들이 별찍기인데요별찍기 예제들은 for문의 실행순서를 파악하기에 좋습니다. 1. 삼각형모양 별찍기123456789101112131415var star = &apos;&apos;; //1. 우선 결과를 담을 변수를 선언해 주고요for (let i = 1 ; i &lt; 10 ; i ++)&#123; //2. 첫번째 for문으로 찍는 별의 높이 즉 행의 갯수를 결정합니다 for (let j = 0 ; j &lt; i ; j++)&#123; //3. j가 i보다 작을때 까지 j에 1을 더하면서 star += &apos;*&apos;; //4. &apos;*&apos; 문자열을 star변수에 연결하는 행동을 반복하고 스코프를 빠져나갑니다 &#125; star += &apos;\\n&apos;; //5. 스코프를 빠져나온 후 star에 담긴 문자열 &apos;*&apos;에 &apos;\\n&apos;문자열을 연결해서 개행을 하고 //6. 다시 첫번째 for문으로 돌아가 i가 10이 될때까지 반복문을 실행합니다&#125;console.log(star); 결과 :123456789********************************************* 2. 피라미드 별 찍기12345678910111213141516var totalStar = &apos;&apos;; // 마찬가지로 결과를 담을 변수를 선언해 주고요for ( let a = 0 ; a &lt; 5 ; a++ ) &#123; // 피라미드의 높이가 되겠죠?let star = &apos;&apos;; // for문 안에서 결과를 임시로 담아둘 지역변수를 선언하고, for ( let b = 4 ; b &gt; a ; b-- ) &#123; // 지역변수 b가 a보다 클때까지 반복문을 실행합니다. star += &apos; &apos;; // star변수에 공백문자열을 4번 연결하겠네요 &#125; for ( let c = 0 ; c &lt; (2 * a + 1) ; c++ )&#123; // a의 값이 0이었으므로 (2 * a + 1)은 1이 되고 반복문을 1회 실행 star += &apos;*&apos;; // star변수에 문자열 &apos;*&apos;을 연결합니다 &#125; totalStar += star + &apos;\\n&apos;;; // 변수 totalStar에 개행문자를 연결하고 다시 첫번째 for문으로 돌아갑니다&#125;console.log(totalStar); 결과:12345 * *** ***** **************** 3. 별 뒤쪽에 연결되는 공백문자열 추가12345678910111213141516var totalStar = &apos;&apos;;for(var a=0; a&lt;5; a++)&#123; //피라미드의 높이를 결정하고 var star= &apos;&apos;; for(var b=4; b&gt;a; b--)&#123; //공백문자열을 4번반복 star += &apos;1&apos;; &#125; for(var c=0; c&lt;(a*2+1); c++)&#123; //공백문자열 뒤에 연결할 별의 갯수 처음에는 1번, 그다음에는 3번...5...7 star +=&apos;2&apos;; &#125; for(var d=4; d&gt;a; d--)&#123; //별뒤에 연결할 공백문자출력 4번반복 star +=&apos;3&apos;; &#125; totalStar = totalStar + star + &apos;\\n&apos;;; // 토탈변수에 star변수 안에 있는&apos; &apos; + &apos;*&apos; + &apos; &apos;와 &apos;\\n&apos;을 담고..&#125;console.log(totalStar); 결과 : for문의 실행순서를 결과로 확인하면 이해가 쉽습니다.12345111123333111222333112222233122222223222222222","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"javascript","slug":"programing/javascript","permalink":"http://OneNineIx.github.io/categories/programing/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://OneNineIx.github.io/tags/javascript/"},{"name":"별찍기","slug":"별찍기","permalink":"http://OneNineIx.github.io/tags/별찍기/"},{"name":"star","slug":"star","permalink":"http://OneNineIx.github.io/tags/star/"},{"name":"for문","slug":"for문","permalink":"http://OneNineIx.github.io/tags/for문/"}]},{"title":"마크다운(markdown)","slug":"test","date":"2018-09-03T05:16:13.000Z","updated":"2018-09-16T16:35:38.389Z","comments":true,"path":"2018/09/03/test/","link":"","permalink":"http://OneNineIx.github.io/2018/09/03/test/","excerpt":"","text":"Markdown은 텍스트 기반의 마크업언어로 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다. 마크다운이 최근 각광받기 시작한 이유는 깃헙(https://github.com) 덕분이다. 깃헙의 저장소Repository에 관한 정보를 기록하는 README.md는 깃헙을 사용하는 사람이라면 누구나 가장 먼저 접하게 되는 마크다운 문서였다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있다는 강점이 부각되면서 점점 여러 곳으로 퍼져가게 된다. Hexo라는 블로그 프레임워크는 html로 작성해도 되지만 마크다운 언어를 지원하는데요.때문에 마크다운으로 포스트를 작성하면 알아서 html소스로 변환시켜 줍니다.마크다운에 대해 알고만 있었지 사용해볼 기회가 없었는데 Hexo로 블로깅을 시작하면서 이 참에 마크다운을 사용하게 됐어요.마크다운 문법을 사용하니 마우스 없이 간편하게 보기좋은 문서를 작성할 수 있다는게 참 편리한 것 같습니다. 목차 1. 문단 제목의 표현2. 큰 제목과 중간 제목의 다른 표현3. 이텔릭체, 볼드체, 취소선, 밑줄4. 하이퍼링크5. 블럭 인용6. 순서가 부여된 리스트7. 순서 없는 리스트8. 문단 나누기9. 표(Table)10. 소스코드 표현11. 테이블에서의 개행11. 이미지 넣기 1. 문단 제목의 표현1234# 큰 제목## 중간 제목### 작은 제목##### ..작은 제목 큰 제목중간 제목작은 제목..작은 제목 2. 큰 제목과 중간 제목의 다른 표현1234큰 제목=============중간 제목------------- 큰 제목중간 제목 3. 이텔릭체, 볼드체, 취소선 ,밑줄12345*이텔릭체***볼드체**~~취소선~~&lt;U&gt;밑줄&lt;/U&gt;***굵고기울게*** 이텔릭체볼드체취소선 밑줄 굵고기울게 4. 하이퍼링크1[링크명](http://www.xxx.com)입니다. 링크명입니다. 5. 블럭 인용1&gt;문단의 내용 문단의 내용 6. 순서가 부여된 리스트1231. 첫 번째1. 두 번째1. 세 번째 첫 번째 두 번째 세 번째 7. 순서 없는 리스트12345- 첫 번째 - 첫 번째의 첫 번째 - 첫 번째의 두 번째- 두 번째- 세 번째 첫 번째 첫 번째의 첫 번째 첫 번째의 두 번째 두 번째 세 번째 8. 문단 나누기첫 번째 문단 바로 밑에 —–를 작성하면 중간제목의 표현이 됩니다.**1234첫 번째 문단------------ 두 번째 문단 첫번째 문단 두번째 문단 9. 표(Table)1234|헤더1|헤더2|헤더3||:---:|:---:|:---:||1|2|3||4|5|6| 헤더1 헤더2 헤더3 1 2 3 4 5 6 10. 소스코드 표현12345678//```//백틱3번을 타이핑하고 그 안쪽에var x = 15;if(x &gt;= 10)&#123; console.log(&apos;변수 x는 10 이상이다.&apos;);&#125;else&#123; console.log(&apos;변수 x는 10미만이다. &apos;);&#125;//```//소스코드를 작성하세요 123456var x = 15;if(x &gt;= 10)&#123; console.log(&apos;변수 x는 10 이상이다.&apos;);&#125;else&#123; console.log(&apos;변수 x는 10미만이다. &apos;);&#125; 11. 테이블에서의 개행문자로 테이블의 개행을 &lt;br&gt; 태그로 표현가능하다123|목차||:---||[1. 문단 제목의 표현](#chap-1)&lt;br&gt;[2. 큰 제목과 중간 제목의 다른 표현](#chap-2)&lt;br&gt;[3. 이텔릭체, 볼드체, 취소선](#chap-3)&lt;br&gt;[4. 하이퍼링크](#chap-4)&lt;br&gt;[5. 블럭 인용](#chap-5)&lt;br&gt;[6. 순서가 부여된 리스트](#chap-6)&lt;br&gt;[7. 순서 없는 리스트](#chap-7)&lt;br&gt;[8. 문단 나누기](#chap-8)&lt;br&gt;[9. 표(Table)](#chap-9)&lt;br&gt;[10. 소스코드 표현](#chap-10)&lt;br&gt;[11. 이미지 넣기](#chap-11)| 테이블의 개행을 활용한 상단의 목차 11. 이미지 넣기1![라이언 귀여워](https://media1.tenor.com/images/d278f33e1e8305c98f8f6cc8fb40d5ae/tenor.gif?itemid=10744149 &quot;툴팁 메시지. 이 부분은 생략해도 됩니다.&quot;)","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OneNineIx.github.io/categories/Hexo/"},{"name":"markdown","slug":"Hexo/markdown","permalink":"http://OneNineIx.github.io/categories/Hexo/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://OneNineIx.github.io/tags/markdown/"}]},{"title":"Hexo 포스트하기","slug":"hello-world","date":"2018-08-30T14:04:24.518Z","updated":"2018-11-12T21:56:32.375Z","comments":true,"path":"2018/08/30/hello-world/","link":"","permalink":"http://OneNineIx.github.io/2018/08/30/hello-world/","excerpt":"","text":"Hexo를 시작한 것을 환영합니다! 더 많은 정보를 원하신다면 documentation를 확인해보세요. Hexo를 사용하실때 불편함을 느끼셨다면, troubleshooting 여기에서 답을 찾을 수 있어요 아니면 GitHub을 통해 질문해주세요. Quick Start설치하기1$ npm install -g hexo-cli 시작하기블로그 파일을 저장할 폴더와 구조를 만든다. 123$ hexo init myBlog$ cd myBlog$ npm install 로컬서버 시작하기1$ hexo server More info: Server 새로운 포스트 만들기1$ hexo new \"My New Post\" More info: Writing 정적인 파일들 생성하기1$ hexo generate More info: Generating 원격 사이트들 배포하기1$ hexo deploy More info: Deployment 정적인 파일들 제거하기1$ hexo clean Post Asset 폴더_config.yml1$ post_asset_folder: true Asset 폴더 관리 기능을 활성화 시켰다면,1hexo new [layout] &lt;title&gt; More info: asset-folders","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OneNineIx.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://OneNineIx.github.io/tags/Hexo/"}]}]}