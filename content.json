{"meta":{"title":"Joonseong H","subtitle":"IT blog / Thanks to everyone!","description":"using Hexo","author":"JSH","url":"http://OneNineIx.github.io"},"pages":[],"posts":[{"title":"관계형 데이터베이스 모델링 (Entity - Relationship Model)","slug":"database1","date":"2018-09-14T07:17:55.000Z","updated":"2018-09-16T10:39:37.399Z","comments":true,"path":"2018/09/14/database1/","link":"","permalink":"http://OneNineIx.github.io/2018/09/14/database1/","excerpt":"","text":"ER 모델링 관계형 데이터베이스 모델링 (Entity - Relationship Mdel) 개체(Entity) - 개별적으로 구성될 수 있는 모든것 속성(property) - 각 개체가 가질수 있는 정보들 관계(Relationship) - ER모델에서 관계는 두개이상의 개체사이의 연관성을 의미한다. 개체집합(entity) 다른대상과 분명히 구별되는 독립적인 존재 어떠한 행위(업무)를 하는 행위의 대상이 되는 주체, 객체(ex: 학생,교수,강의) 속성 대상이 되는 주체,객체의 속성 학생(개체집합) 교수 강의 학번(개체집합의 키속성) 교수번호(pk) 강의번호 소속학과(그냥속성) 소속학과 강의이름 학생이름 교수이름 강의실 학년 직위 강의시간 성별 전화번호 인원제한 나이 연구실위치 이수구분 관계(Relationship) 개체가 수행하는 어떠한 행위 개체와 연관된 업무 프로세스 사상( mapping) 식별-비식별 관계 1:1, 1:N, M:N 관계 식별관계 부모 테이블의 기본키가 자식 테이블의 기본키로 전이되는 관계 1:1, 1:N, M:N 관계 표현 비식별관계 부모 테이블의 기본키가 자식 테이블의 일반 속성으로 전이되는 관계 1:1, 1:N 관계 표현 관계정의 한 강의는 오직 한 교무나 할 수 있으며 , 인원제한에 한해 여러명의 학생이 한강의에 수강신청을 할 수 있음 한 교수는 한 학기에 한 개 이상의 강의를 수업함 교수–1..N–(최소 최대표현) 수업 –1..1– 강의 한명의 교수는 하나또는 여러개의 수업에 참여할 수 있고 하나의 강의는 하나의 한명의 교수에 의해서만 수업이 진행된다. 관계정의 한 강의는 오직 한 교수만 할 수 있으며, 인원제한에 한해 여러 명의 학생이 한 강의에 수강신청을 할 수 있음. 한 학생은 여러 강의의 수강신청을 할 수 있음.단 강의인원제한을 초과하면, 선착순 배정함 학생—수강신청—강의 한명의 학생은 여러개의 강의를 , 하나의 강의는 여러명의 학생에게 관계를 가지므로 다대다 관계 어떤것이 개체이고 속성이고 관계이다 하는점을 파악해보는 연습을 해보자. 참고자료데이터베이스 설계 및 구현. 정재화, 이언배. 한국방송통신대학교출판문화원","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"database","slug":"programing/database","permalink":"http://OneNineIx.github.io/categories/programing/database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://OneNineIx.github.io/tags/database/"},{"name":"MySQL","slug":"MySQL","permalink":"http://OneNineIx.github.io/tags/MySQL/"}]},{"title":"Spring Boot, REST 기반의 JPA 예제를 참조해 이를 스프링 마이바티스로 예제를 변경","slug":"jpa-mybatis","date":"2018-09-05T08:39:12.000Z","updated":"2018-09-05T09:10:14.209Z","comments":true,"path":"2018/09/05/jpa-mybatis/","link":"","permalink":"http://OneNineIx.github.io/2018/09/05/jpa-mybatis/","excerpt":"","text":"Restfulresource의 고유한 URi을 가지고 get put post 등으로 접근하는 방식 JPA쿼리가 담긴 라이브러리 이다.자주 반복적으로 사용되는 쿼리를 메소드에 담아둔 라이브러리로, 메소드를 이용해 쿼리를 사용한다 Springboot Rest기반 JPA예제pom.xml1spring boot devtools : 소스코드 변경시 자동으로 서버를 재접속하는 일을 해준다. application.properties1234567891011121314151617spring.datasource.url=jdbc:mysql://localhost:3306/bootrest?createDatabaseIfNotExist=truespring.datasource.username=rootspring.datasource.password=1234spring.datasource.tomcat.max-wait=20000spring.datasource.tomcat.max-active=50spring.datasource.tomcat.max-idle=20spring.datasource.tomcat.min-idle=15spring.datasource.hikari.connection-test-query=SELECT 1​spring.jpa.hibernate.ddl-auto=create// 모델 클래스를 entity한 테이블을 자동으로 만들어줘라는 설정 update로 해두면 수정된사항만 저장된다.spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect // 테이블 만들때 오류나서 이거해준다spring.jpa.properties.hibernate.id.new_generator_mappings=falsespring.jpa.properties.hibernate.format_sql=true // sql날라가는거 보여주세요​// 디버그 레벨의 로깅설정.logging.level.org.hibernate.SQL=DEBUG logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE 1. 제일먼저 모델클래스 Emp를 만들어준다.1234567891011121314151617181920//엔티티 매핑 어노테이션//설정에 Entity로 해두었기 때문에 달아둔다.기본 생성자는 필수(파라미터가 없는 public 또는 protected 생성자) : 자바는 생성자가 하나도 없으면 기본 생성자를 자동으로 만듬저장할 필드에 final 은 불가능@Table(name=&quot;emp&quot;)//emp라는 이름의 테이블을 자동으로 만들어준다.@Data@AllArgsConstructor@NoArgsConstructorpublic class Emp implements Serializable&#123; private static final long serialVersionUID = 1L; @Id // empno가 키값이 되고 @GeneratedValue(strategy = GenerationType.IDENTITY) // 키값을 자동으로 생성해준다. private Integer empno; private String ename; private Integer sal;​&#125; ​ 2. 메인에서 샘플데이터를 밀어넣어보자123456789101112131415161718192021222324package com.example.rest;​​​@SpringBootApplicationpublic class SpringbootrestApplication implements CommandLineRunner&#123;// Run 메소드를 호출하기 위해서 인터페이스를 구현하고​ @Autowired EmpRepository empRepository; // 레파지토리구현체의 메소드로 데이터를 만들어야 함으로 EmpRepository를 주입해주고​ public static void main(String[] args) &#123;​ SpringApplication.run(SpringbootrestApplication.class, args);//springbootmain이 run메소드를 호출해준다. &#125;​ @Override public void run(String... args) throws Exception&#123; //CommandLineRunner의 run메소드를 만들어두면 empRepository.save(new Emp(1,&quot;홍길동&quot;,9000000)); empRepository.save(new Emp(2,&quot;김봉삼&quot;,3000000)); empRepository.save(new Emp(3,&quot;이진삼&quot;,6000000)); empRepository.save(new Emp(4,&quot;장봉창&quot;,7000000)); empRepository.save(new Emp(5,&quot;둘리&quot;,2000000)); &#125;&#125; 3. Emprepository를 만들자 (쿼리가 담긴다)1234567891011121314151617181920extends JpaRepository를 상속해주어 Jpa메소드들을 사용할수 있게한다.Emprepository extends JpaRepository&lt;Emp, Integer&gt; // 키값을 파라메터로 입력해주고​package com.example.rest.repository;​public interface EmpRepository extends JpaRepository&lt;Emp, Integer&gt;&#123;​ List&lt;Emp&gt; findBySalBetween(int sal1, int sal2); //두 파라메터의 사이에 있는 급여인 사원을 조회하려고 추상화한 메서드// 사원의 목록이니까 List이고 파라메터를 두개받아서 급여가 sal인 사원들의 목록을 Select하는 메소드// 쿼리 메소드, 메소드 이름으로 자동으로 SELECT 쿼리 생성// JPA에서 자동으로 생성하는 쿼리는 다음과 같다.// select// emp0_.empno as empno1_0_,// emp0_.ename as ename2_0_,// emp0_.sal as sal3_0_// from// emp emp0_// where// emp0_.sal between ? and ?&#125; 4. Service를 만들어준다123456789101112131415package com.example.rest.service;​public interface EmpService &#123; // 메소드 이름은 내가 직접 만든것임. 구현할 객체에서 구체적인 쿼리가 담긴다. List&lt;Emp&gt; findAll(); //모든사원 주세요​ Emp findById(int empno); // 사원 id로 하나의 사원 주세요​ void deleteById(int empno); // 사번주시고 삭제해주세요​ Emp save(Emp emp); // 이사원 저장해주세요​ List&lt;Emp&gt; findBySalBetween(int sal1, int sal2); //이거하나만 레파지토리에서 jpa로 만들었다.​ void updateById(int empno, Emp emp); // 이 사원을 (Emp emp)에 던져주는 객체에 수정해주세요&#125; 4. 인터페이스의 구현체를 만든다.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.example.rest.service;​@Service // 구현체니까 Service 애노테이션을 붙여준다public class EmpServiceImpl implements EmpService &#123;​ @Autowired // EmpRepository를 자동주입했다 객체참조를 취득하였다. private EmpRepository empRepository;​ @Override public List&lt;Emp&gt; findAll() &#123; List&lt;Emp&gt; emps = new ArrayList&lt;&gt;(); // ArrayList로 emps를 만들고 empRepository.findAll().forEach(e -&gt; emps.add(e));// 객체참조를 얻은 empRepository의 findAll()메소드를 불러주고// forEach로 돌리면서 컬렉션 emps에 add시켜놓고 return emps;//emps컬렉션을 되돌려준다 &#125;​ @Override public Emp findById(int empno) &#123; Emp emp = empRepository.findById(empno).orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Emp&quot;, &quot;empno&quot;, empno)); // empRepository의 기본제공메소드 직접 만들지는 않았다.//empno(사번)을 던져주고 사원을 조회해주는 메소드 사번 없으면 orElseThrow로 ResourceNotFoundException(직접만든 예외)가 발생한다. return emp;//한명의사원 돌려준다. &#125;​ @Override public void deleteById(int empno) &#123; // 지우고서 행동을 종료하기 때문에 리턴이 없으므로 타입은 void이다 empRepository.deleteById(empno); //JpaRepository의 객체참조를 취득한 empRepository의 delete메소드에 사번을 주고 호출하면 지워진다 &#125;​ @Override public Emp save(Emp emp) &#123; empRepository.save(emp); return emp; &#125;​ @Override public List&lt;Emp&gt; findBySalBetween(int sal1, int sal2) &#123;// 급여가 두 파라미터의 사이에 해당되는 사원의 급여를 조회하는 메서드 List&lt;Emp&gt; emps = empRepository.findBySalBetween(sal1, sal2); System.out.println(emps.size() + &quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + sal1 + sal2); if (emps.size() &gt; 0) &#123; // 사이즈가 0보다 크면 되돌려주고 return emps; &#125; else &#123; // 아니면 널을 되돌려준다. return null; &#125; &#125;​ @Override public void updateById(int empno, Emp emp) &#123;// @RequestBody같은것으로 받는다 Emp e = empRepository.findById(empno).orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Emp&quot;, &quot;empno&quot;, empno)); // 먼저 수정할 사원을 사번파라메터로 추출하고 e.setEname(emp.getEname()); //추출한 사원의 이름을 수정하고 e.setSal(emp.getSal()); //추출한 사원의 급여를 수정하고​ empRepository.save(emp); // save를 호출함으로써 데이터베이스에 반영했다. &#125;&#125; 5. HTTP가 404error일때12345678910111213141516171819202122232425262728293031323334package com.example.rest.exception;​import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.http.HttpStatus;​@ResponseStatus(value = HttpStatus.NOT_FOUND) // HTTP가 404error일때 발생되도록public class ResourceNotFoundException extends RuntimeException&#123;​ private String resourceName; // 리소스 이름 private String fieldName; //필드 이름 private Object fieldValue; // 필드 값 public ResourceNotFoundException(String resourceName, String fieldName, Object fieldValue) &#123; super(String.format(&quot;%s not found with %s : %s&quot;, resourceName, fieldName, fieldValue)); // 파라메터 3개받아서 필드변경//&quot;%s not found with %s(몇번사원) : %s(사원ID)&quot; this.resourceName = resourceName; this.fieldName = fieldName; this.fieldValue = fieldValue; &#125;​ public String getResourceName() &#123; return resourceName; &#125;​ public String getFieldName() &#123; return fieldName; &#125;​ public Object getFieldValue() &#123; return fieldValue; &#125;&#125; 6. Controller를 만들자123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.example.rest.controller;​​@RestController //Rest컨트롤러 이므로 레스트컨트롤러로 하고@RequestMapping(&quot;emp&quot;) //http://localhost:8080/emp 로 들어올때 사용하는 어노테이션 생략시 8080만 입력하는게 디폴트public class EmpController &#123; @Autowired // 서비스 구현체를 주입했다. private EmpService empService;​​ @GetMapping(produces = &#123; MediaType.APPLICATION_JSON_VALUE &#125;) // JSON이니까 Media타입이라고? 썼다. 모든사원 조회, GET, Localhost:8080/emp public ResponseEntity&lt;List&lt;Emp&gt;&gt; getAllEmps() &#123; //ResponseEntity는 Rest니까 주는 타입?인거같고 여러명을 조회하는것이라 &lt;List&lt;Emp&gt;&gt;로 주었다. 한명의사원이라면 Emp만 List&lt;Emp&gt; emps = empService.findAll(); emps에 findAll()메소드로 모든사원을 조회해 담아주고 return new ResponseEntity&lt;List&lt;Emp&gt;&gt;(emps, HttpStatus.OK); // 이렇게 돌려준다 &#125;​//포스트맨으로 테스트하자 @GetMapping(value = &quot;/&#123;empno&#125;&quot;, produces = &#123; MediaType.APPLICATION_JSON_VALUE &#125;)//empno로 한명의사원 조회, GET, Localhost:8080/emp/(empno사번) public ResponseEntity&lt;Emp&gt; getEmp(@PathVariable(&quot;empno&quot;) int empno) &#123;//URL경로에 들어온값을 파라메터로 받아내려면@PathVariable(&quot;empno&quot;), (value = &quot;/&#123;empno&#125;&quot;를 받아서 int empno return new ResponseEntity&lt;Emp&gt;(empService.findById(empno), HttpStatus.OK); // ResponseEntity&lt;Emp&gt;에 담아서 리턴 &#125;​// empno로 사원삭제 @DeleteMapping(value = &quot;/&#123;empno&#125;&quot;, produces = &#123; MediaType.APPLICATION_JSON_VALUE &#125;) //@DeleteMapping : HTTP요청 메소드만 다르다.(rest방식) public ResponseEntity&lt;Void&gt; deleteEmp(@PathVariable(&quot;empno&quot;) int empno) &#123; empService.deleteById(empno); return new ResponseEntity&lt;Void&gt;(HttpStatus.OK); &#125;​​// empno로 사원 수정(empno로 사원 찾아 인자로 넘어오는 Emp 객체의 ename, sal로 수정함) @PutMapping(value = &quot;/&#123;empno&#125;&quot;, produces = &#123; MediaType.APPLICATION_JSON_VALUE &#125;)// PUT, Localhost:8080/emp/(empno사번) public ResponseEntity&lt;Emp&gt; updateEmp(@PathVariable(&quot;empno&quot;) int empno, //수정할 대상이 되는 target파라메터@RequestBody Emp emp) &#123; // @RequestBody로 들어온사원객체 이런거 던져주는 테스트할려고 포스트맨씀 empService.updateById(empno, emp); // 수정해주고 return new ResponseEntity&lt;Emp&gt;(emp, HttpStatus.OK); //수정한 emp를 인자로 받아 ResponseEntity&lt;Emp&gt;에 담아 던져줬다. &#125;​//사원입력 @PostMapping// 한명의 사원을 입력하는 컨트롤러 메소드 public ResponseEntity&lt;Emp&gt; save(@RequestBody Emp emp) &#123;//@RequestBody으로 들어오는 Emp객체로 자동으로 바인딩해서 받아내고(empno,ename) return new ResponseEntity&lt;Emp&gt;(empService.save(emp), HttpStatus.OK); //저장 &#125;​​//급여를 기준으로 사원 검색 (sal&gt;sal1 and sal&lt;sal2) @GetMapping(value = &quot;/&#123;sal1&#125;/&#123;sal2&#125;&quot;)// &quot;/&#123;sal1&#125;/&#123;sal2&#125;&quot;형태로 요청 http://Localhost:8080/emp/0(급여sal1)/8000000(급여sal2) : 급여가 0에서 800만사이인 사원 조회 public ResponseEntity&lt;List&lt;Emp&gt;&gt; getEmpBySalBetween(@PathVariable int sal1, // URL경로에 대한 값@PathVariable int sal2) &#123; // URL경로에 대한 값 List&lt;Emp&gt; emps = empService.findBySalBetween(sal1, sal2); return new ResponseEntity&lt;List&lt;Emp&gt;&gt;(emps, HttpStatus.OK); &#125;&#125; 마이바티스로 변경1234567891011121314151617181920212223242526272829303132package com.example.mybatis;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.CommandLineRunner;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import com.example.mybatis.model.Emp;import com.example.mybatis.repository.EmpRepository;@SpringBootApplicationpublic class SpringbootjpachangemybatisApplication implements CommandLineRunner&#123; @Autowired EmpRepository empRepository; public static void main(String[] args) &#123; SpringApplication.run(SpringbootjpachangemybatisApplication.class, args); &#125; @Override public void run(String... args) throws Exception &#123; empRepository.save(new Emp(1,&quot;홍길동&quot;,9000000)); empRepository.save(new Emp(2,&quot;김봉삼&quot;,3000000)); empRepository.save(new Emp(3,&quot;김갑수&quot;,6000000)); empRepository.save(new Emp(4,&quot;조춘현&quot;,7000000)); empRepository.save(new Emp(5,&quot;둘리&quot;,2000000)); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940package com.example.mybatis.Controller;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import com.example.mybatis.model.Emp;import com.example.mybatis.repository.EmpRepository;@Controllerpublic class EmpController &#123; @Autowired EmpRepository empRepository; @RequestMapping(value=&quot;/emps&quot;, method=RequestMethod.GET, params=&quot;json&quot;) @ResponseBody public Object userJson() &#123; System.out.println(&quot;조건3개 ?json empsJson호출&quot;); List&lt;Emp&gt; emps = empRepository.findAll(); return emps; &#125; @RequestMapping(value=&quot;/emps&quot;, method=RequestMethod.GET) public Object userHome(Model model) &#123; System.out.println(&quot;조건2개 userJson호출&quot;); List&lt;Emp&gt; emps = empRepository.findAll(); model.addAttribute(&quot;emps&quot;, emps ); System.out.println(&quot;조건2개 userJson호출&quot;); return &quot;Emp_list&quot;; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839package com.example.mybatis.mapper;import java.util.List;import org.apache.ibatis.annotations.Delete;import org.apache.ibatis.annotations.Insert;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import org.apache.ibatis.annotations.Result;import org.apache.ibatis.annotations.ResultType;import org.apache.ibatis.annotations.Results;import org.apache.ibatis.annotations.Select;import org.apache.ibatis.annotations.Update;import com.example.mybatis.model.Emp;@Mapperpublic interface EmpMapper &#123; @Select(&quot;SELECT * FROM emp ORDER BY empno ASC&quot;) @ResultType(Emp.class) public List&lt;Emp&gt; findAll(); @Select(&quot;SELECT * FROM emp WHERE empno = #&#123;empno&#125;&quot;) @Results(id = &quot;empResultMap&quot;, value = &#123; @Result(property = &quot;empno&quot;, column = &quot;empno&quot;), @Result(property = &quot;ename&quot;, column = &quot;ename&quot;), @Result(property = &quot;sal&quot;, column = &quot;sal&quot;) &#125;) public Emp findById(int empno); @Delete(&quot;DELETE FROM emp WHERE empno = #&#123;empno&#125;&quot;) public void deleteById(int empno); @Insert(&quot;INSERT into emp(empno,ename,sal) VALUES(#&#123;empno&#125;, #&#123;ename&#125;,#&#123;sal&#125;)&quot;) public void save(Emp emp); @Select(&quot;SELECT * FROM emp WHERE sal &gt; #&#123;sal1&#125; and sal &lt; #&#123;sal2&#125;&quot;) public List&lt;Emp&gt; findBySalBetween(@Param(&quot;sal1&quot;) int sal1, @Param(&quot;sal2&quot;) int sal2); @Update(&quot;UPDATE emp SET ename = #&#123;emp.ename&#125;, sal=#&#123;emp.sal&#125; WHERE empno = #&#123;eno&#125;&quot;) public void updateById(@Param(&quot;eno&quot;) int empno, @Param(&quot;emp&quot;) Emp emp);&#125; 123456789101112131415161718192021222324252627282930package com.example.mybatis.model;import java.io.Serializable;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Entity@Table(name = &quot;emp&quot;)@Data@AllArgsConstructor@NoArgsConstructorpublic class Emp implements Serializable &#123; private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer empno; private String ename; private Integer sal;&#125; 123456789101112131415161718192021222324252627282930313233343536package com.example.mybatis.repository;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import com.example.mybatis.mapper.EmpMapper;import com.example.mybatis.model.Emp;@Repositorypublic class EmpRepository &#123; @Autowired EmpMapper mapper; public List&lt;Emp&gt; findAll()&#123; return mapper.findAll(); &#125; public Emp findById(int empno) &#123; return mapper.findById(empno); &#125; public void deleteById(int empno)&#123; mapper.deleteById(empno); &#125; public void save(Emp emp) &#123; mapper.save(emp); &#125; public List&lt;Emp&gt; findBySalBetween(int sal1, int sal2)&#123; return mapper.findBySalBetween(sal1, sal2); &#125; public void updateById(int empno, Emp emp) &#123; mapper.updateById(empno, emp); &#125;&#125; application.properties1234567891011121314151617181920212223242526272829spring.datasource.url=jdbc:mysql://localhost:3306/bootrest?createDatabaseIfNotExist=truespring.datasource.username=rootspring.datasource.password=1234spring.datasource.tomcat.max-wait=20000spring.datasource.tomcat.max-active=50spring.datasource.tomcat.max-idle=20spring.datasource.tomcat.min-idle=15spring.datasource.initialization-mode=neverspring.jpa.hibernate.ddl-auto=createspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialectspring.jpa.properties.hibernate.id.new_generator_mappings=falsespring.jpa.properties.hibernate.format_sql=truemybatis.configuration.map-underscore-to-camel-case=truemybatis.configuration.default-fetch-size=100mybatis.configuration.default-statement-timeout=30logging.level.org.hibernate.SQL=DEBUGlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACEspring.mvc.view.prefix=/WEB-INF/views/spring.mvc.view.suffix=.jsplogging.config=classpath:logback-spring.xml spring.http.encoding.charset=UTF-8spring.http.encoding.enabled=truespring.http.encoding.force=true jsp1234567891011121314151617181920212223242526272829303132&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=EUC-KR&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class=&quot;col-xs-1 col-sm-1 col-md-1 col-lg-1&quot;&gt;No&lt;/th&gt; &lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-lg-2&quot;&gt;Writer&lt;/th&gt; &lt;th class=&quot;col-xs-2 col-sm-2 col-md-2 col-lg-2&quot;&gt;Sal&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=&quot;#&#123;emps &#125;&quot; var=&quot;b&quot;&gt; &lt;tr&gt; &lt;td&gt;$&#123;b.empno &#125;&lt;/td&gt; &lt;td&gt;$&#123;b.ename &#125;&lt;/td&gt; &lt;td&gt;$&#123;b.sal &#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;springbootjpachangemybatis&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.3.RELEASE&lt;/version&gt; &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-dbcp&lt;/groupId&gt; &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;11.2.0.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt; &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.bgee.log4jdbc-log4j2&lt;/groupId&gt; &lt;artifactId&gt;log4jdbc-log4j2-jdbc4.1&lt;/artifactId&gt; &lt;version&gt;1.16&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.bgee.log4jdbc-log4j2&lt;/groupId&gt; &lt;artifactId&gt;log4jdbc-log4j2-jdbc4.1&lt;/artifactId&gt; &lt;version&gt;1.16&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;codelds&lt;/id&gt; &lt;url&gt;https://code.lds.org/nexus/content/groups/main-repo&lt;/url&gt;; &lt;/repository&gt; &lt;/repositories&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"mybatis","slug":"programing/mybatis","permalink":"http://OneNineIx.github.io/categories/programing/mybatis/"}],"tags":[{"name":"jpa","slug":"jpa","permalink":"http://OneNineIx.github.io/tags/jpa/"},{"name":"mybatis","slug":"mybatis","permalink":"http://OneNineIx.github.io/tags/mybatis/"},{"name":"spring","slug":"spring","permalink":"http://OneNineIx.github.io/tags/spring/"},{"name":"java","slug":"java","permalink":"http://OneNineIx.github.io/tags/java/"}]},{"title":"자바스크립트로 별 찍기(다중 for문)","slug":"Star","date":"2018-09-05T06:56:51.000Z","updated":"2018-09-16T09:44:56.347Z","comments":true,"path":"2018/09/05/Star/","link":"","permalink":"http://OneNineIx.github.io/2018/09/05/Star/","excerpt":"","text":"언어를 익히면서 for문을 배울때 보통 같이 하게되는 예제들이 별찍기인데요별찍기 예제들은 for문의 실행순서를 파악하기에 좋습니다. 1. 삼각형모양 별찍기123456789101112131415var star = &apos;&apos;; //1. 우선 결과를 담을 변수를 선언해 주고요for (let i = 1 ; i &lt; 10 ; i ++)&#123; //2. 첫번째 for문으로 찍는 별의 높이 즉 행의 갯수를 결정합니다 for (let j = 0 ; j &lt; i ; j++)&#123; //3. j가 i보다 작을때 까지 j에 1을 더하면서 star += &apos;*&apos;; //4. &apos;*&apos; 문자열을 star변수에 연결하는 행동을 반복하고 스코프를 빠져나갑니다 &#125; star += &apos;\\n&apos;; //5. 스코프를 빠져나온 후 star에 담긴 문자열 &apos;*&apos;에 &apos;\\n&apos;문자열을 연결해서 개행을 하고 //6. 다시 첫번째 for문으로 돌아가 i가 10이 될때까지 반복문을 실행합니다&#125;console.log(star); 결과 :123456789********************************************* 2. 피라미드 별 찍기12345678910111213141516var totalStar = &apos;&apos;; // 마찬가지로 결과를 담을 변수를 선언해 주고요for ( let a = 0 ; a &lt; 5 ; a++ ) &#123; // 피라미드의 높이가 되겠죠?let star = &apos;&apos;; // for문 안에서 결과를 임시로 담아둘 지역변수를 선언하고, for ( let b = 4 ; b &gt; a ; b-- ) &#123; // 지역변수 b가 a보다 클때까지 반복문을 실행합니다. star += &apos; &apos;; // star변수에 공백문자열을 4번 연결하겠네요 &#125; for ( let c = 0 ; c &lt; (2 * a + 1) ; c++ )&#123; // a의 값이 0이었으므로 (2 * a + 1)은 1이 되고 반복문을 1회 실행 star += &apos;*&apos;; // star변수에 문자열 &apos;*&apos;을 연결합니다 &#125; totalStar += star + &apos;\\n&apos;;; // 변수 totalStar에 개행문자를 연결하고 다시 첫번째 for문으로 돌아갑니다&#125;console.log(totalStar); 결과:12345 * *** ***** **************** 3. 별 뒤쪽에 연결되는 공백문자열 추가12345678910111213141516var totalStar = &apos;&apos;;for(var a=0; a&lt;5; a++)&#123; //피라미드의 높이를 결정하고 var star= &apos;&apos;; for(var b=4; b&gt;a; b--)&#123; //공백문자열을 4번반복 star += &apos;1&apos;; &#125; for(var c=0; c&lt;(a*2+1); c++)&#123; //공백문자열 뒤에 연결할 별의 갯수 처음에는 1번, 그다음에는 3번...5...7 star +=&apos;2&apos;; &#125; for(var d=4; d&gt;a; d--)&#123; //별뒤에 연결할 공백문자출력 4번반복 star +=&apos;3&apos;; &#125; totalStar = totalStar + star + &apos;\\n&apos;;; // 토탈변수에 star변수 안에 있는&apos; &apos; + &apos;*&apos; + &apos; &apos;와 &apos;\\n&apos;을 담고..&#125;console.log(totalStar); 결과 : for문의 실행순서를 결과로 확인하면 이해가 쉽습니다.12345111123333111222333112222233122222223222222222","categories":[{"name":"programing","slug":"programing","permalink":"http://OneNineIx.github.io/categories/programing/"},{"name":"javascript","slug":"programing/javascript","permalink":"http://OneNineIx.github.io/categories/programing/javascript/"}],"tags":[{"name":"별찍기","slug":"별찍기","permalink":"http://OneNineIx.github.io/tags/별찍기/"},{"name":"star","slug":"star","permalink":"http://OneNineIx.github.io/tags/star/"},{"name":"javascript","slug":"javascript","permalink":"http://OneNineIx.github.io/tags/javascript/"},{"name":"for문","slug":"for문","permalink":"http://OneNineIx.github.io/tags/for문/"}]},{"title":"마크다운(markdown)","slug":"test","date":"2018-09-03T05:16:13.000Z","updated":"2018-09-16T10:07:20.216Z","comments":true,"path":"2018/09/03/test/","link":"","permalink":"http://OneNineIx.github.io/2018/09/03/test/","excerpt":"","text":"Markdown은 텍스트 기반의 마크업언어로 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다. 마크다운이 최근 각광받기 시작한 이유는 깃헙(https://github.com) 덕분이다. 깃헙의 저장소Repository에 관한 정보를 기록하는 README.md는 깃헙을 사용하는 사람이라면 누구나 가장 먼저 접하게 되는 마크다운 문서였다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있다는 강점이 부각되면서 점점 여러 곳으로 퍼져가게 된다. Hexo라는 블로그 프레임워크는 html로 작성해도 되지만 마크다운 언어를 지원하는데요.때문에 마크다운으로 포스트를 작성하면 알아서 html소스로 변환시켜 줍니다.마크다운에 대해 알고만 있었지 사용해볼 기회가 없었는데 Hexo로 블로깅을 시작하면서 이 참에 마크다운을 사용하게 됐어요.마크다운 문법을 사용하니 마우스 없이 간편하게 보기좋은 문서를 작성할 수 있다는게 참 편리한 것 같습니다. 목차 1. 문단 제목의 표현2. 큰 제목과 중간 제목의 다른 표현3. 이텔릭체, 볼드체, 취소선4. 하이퍼링크5. 블럭 인용6. 순서가 부여된 리스트7. 순서 없는 리스트8. 문단 나누기9. 표(Table)10. 소스코드 표현11. 테이블에서의 개행11. 이미지 넣기 1. 문단 제목의 표현1234# 큰 제목## 중간 제목### 작은 제목##### ..작은 제목 큰 제목중간 제목작은 제목..작은 제목 2. 큰 제목과 중간 제목의 다른 표현1234큰 제목=============중간 제목------------- 큰 제목중간 제목 3. 이텔릭체, 볼드체, 취소선123*이텔릭체***볼드체**~~취소선~~ 이텔릭체볼드체취소선 4. 하이퍼링크1[링크명](http://www.xxx.com)입니다. 링크명입니다. 5. 블럭 인용1&gt;문단의 내용 문단의 내용 6. 순서가 부여된 리스트1231. 첫 번째1. 두 번째1. 세 번째 첫 번째 두 번째 세 번째 7. 순서 없는 리스트12345- 첫 번째 - 첫 번째의 첫 번째 - 첫 번째의 두 번째- 두 번째- 세 번째 첫 번째 첫 번째의 첫 번째 첫 번째의 두 번째 두 번째 세 번째 8. 문단 나누기첫 번째 문단 바로 밑에 —–를 작성하면 중간제목의 표현이 됩니다.**1234첫 번째 문단------------ 두 번째 문단 첫번째 문단 두번째 문단 9. 표(Table)1234|헤더1|헤더2|헤더3||:---:|:---:|:---:||1|2|3||4|5|6| 헤더1 헤더2 헤더3 1 2 3 4 5 6 10. 소스코드 표현12345678//```//백틱3번을 타이핑하고 그 안쪽에var x = 15;if(x &gt;= 10)&#123; console.log(&apos;변수 x는 10 이상이다.&apos;);&#125;else&#123; console.log(&apos;변수 x는 10미만이다. &apos;);&#125;//```//소스코드를 작성하세요 123456var x = 15;if(x &gt;= 10)&#123; console.log(&apos;변수 x는 10 이상이다.&apos;);&#125;else&#123; console.log(&apos;변수 x는 10미만이다. &apos;);&#125; 11. 테이블에서의 개행문자로 테이블의 개행을 &lt;br&gt; 태그로 표현가능하다123|목차||:---||[1. 문단 제목의 표현](#chap-1)&lt;br&gt;[2. 큰 제목과 중간 제목의 다른 표현](#chap-2)&lt;br&gt;[3. 이텔릭체, 볼드체, 취소선](#chap-3)&lt;br&gt;[4. 하이퍼링크](#chap-4)&lt;br&gt;[5. 블럭 인용](#chap-5)&lt;br&gt;[6. 순서가 부여된 리스트](#chap-6)&lt;br&gt;[7. 순서 없는 리스트](#chap-7)&lt;br&gt;[8. 문단 나누기](#chap-8)&lt;br&gt;[9. 표(Table)](#chap-9)&lt;br&gt;[10. 소스코드 표현](#chap-10)&lt;br&gt;[11. 이미지 넣기](#chap-11)| 테이블의 개행을 활용한 상단의 목차 11. 이미지 넣기1![라이언 귀여워](https://media1.tenor.com/images/d278f33e1e8305c98f8f6cc8fb40d5ae/tenor.gif?itemid=10744149 &quot;툴팁 메시지. 이 부분은 생략해도 됩니다.&quot;)","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OneNineIx.github.io/categories/Hexo/"},{"name":"markdown","slug":"Hexo/markdown","permalink":"http://OneNineIx.github.io/categories/Hexo/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://OneNineIx.github.io/tags/markdown/"}]},{"title":"Hexo 포스트하기","slug":"hello-world","date":"2018-08-30T14:04:24.518Z","updated":"2018-09-04T20:41:33.937Z","comments":true,"path":"2018/08/30/hello-world/","link":"","permalink":"http://OneNineIx.github.io/2018/08/30/hello-world/","excerpt":"","text":"Hexo를 시작한 것을 환영합니다! 더 많은 정보를 원하신다면 documentation를 확인해보세요. Hexo를 사용하실때 불편함을 느끼셨다면, troubleshooting 여기에서 답을 찾을 수 있어요 아니면 GitHub을 통해 질문해주세요. Quick Start설치하기1$ npm install -g hexo-cli 시작하기블로그 파일을 저장할 폴더와 구조를 만든다. 123$ hexo init myBlog$ cd myBlog$ npm install 로컬서버 시작하기1$ hexo server More info: Server 새로운 포스트 만들기1$ hexo new \"My New Post\" More info: Writing 정적인 파일들 생성하기1$ hexo generate More info: Generating 원격 사이트들 배포하기1$ hexo deploy More info: Deployment 정적인 파일들 제거하기1$ hexo clean","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OneNineIx.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://OneNineIx.github.io/tags/Hexo/"}]}]}